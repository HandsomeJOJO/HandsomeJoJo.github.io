<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>算法专项精选题 - 动态规划（二）</title>
    <link href="/2022/06/21/%E7%AE%97%E6%B3%95/%E4%B8%93%E9%A1%B9%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/algorithm8/"/>
    <url>/2022/06/21/%E7%AE%97%E6%B3%95/%E4%B8%93%E9%A1%B9%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/algorithm8/</url>
    
    <content type="html"><![CDATA[<h1 id="动态规划（二）"><a href="#动态规划（二）" class="headerlink" title="动态规划（二）"></a>动态规划（二）</h1><h2 id="11-分割整数2-按平方数来分割整数"><a href="#11-分割整数2-按平方数来分割整数" class="headerlink" title="11. 分割整数2 按平方数来分割整数"></a>11. 分割整数2 按平方数来分割整数</h2><ul><li><p>题目：一个数分成多个完全平方数的和，求数目最小值（lc279）</p></li><li><p>思路：</p><ol><li>动态规划，时间 O（n^1.5），空间 O（n）</li></ol></li><li><p>题解：</p><ol><li><p>动规</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 动态规划，时间 O（n^1.5），空间 O（n）</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">numSquares</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    List&lt;Integer&gt; squareList = generateSquareList(n);<br>    <span class="hljs-type">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> Integer.MAX_VALUE;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> square : squareList) &#123;<br>            <span class="hljs-keyword">if</span> (square &gt; i) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            min = Math.min(min, dp[i - square] + <span class="hljs-number">1</span>);<br>        &#125;<br>        dp[i] = min;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[n];<br>&#125;<br><br><span class="hljs-keyword">private</span> List&lt;Integer&gt; <span class="hljs-title function_">generateSquareList</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    List&lt;Integer&gt; squareList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">diff</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">square</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (square &lt;= n) &#123;<br>        squareList.add(square);<br>        square += diff;<br>        diff += <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> squareList;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>和剪绳子是同样的递归方法</li></ol></li></ul><h2 id="12-分割整数3-分割整数构成字母字符串"><a href="#12-分割整数3-分割整数构成字母字符串" class="headerlink" title="12. 分割整数3 分割整数构成字母字符串"></a>12. 分割整数3 分割整数构成字母字符串</h2><ul><li><p>题目：数字代表二十六个字母，计算一数字串可代表多少种字母串（lc91）</p></li><li><p>思路：</p><ol><li>动态规划，以位置 i 为结尾的串的解读数目等于，将这个位置单独解释的数目，加上将这个位置和前（后）一个位置连起来解释的数目，时间 O（n），空间 O（n）</li></ol></li><li><p>题解：</p><ol><li><p>动规</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">numDecodings</span><span class="hljs-params">(String s)</span> &#123;<br>    <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span> || s.length() == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> s.length();<br>    <span class="hljs-type">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>];<br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    dp[<span class="hljs-number">1</span>] = s.charAt(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;0&#x27;</span> ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">one</span> <span class="hljs-operator">=</span> Integer.valueOf(s.substring(i - <span class="hljs-number">1</span>, i));<br>        <span class="hljs-keyword">if</span> (one != <span class="hljs-number">0</span>) &#123;<br>            dp[i] += dp[i - <span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (s.charAt(i - <span class="hljs-number">2</span>) == <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">two</span> <span class="hljs-operator">=</span> Integer.valueOf(s.substring(i - <span class="hljs-number">2</span>, i));<br>        <span class="hljs-keyword">if</span> (two &lt;= <span class="hljs-number">26</span>) &#123;<br>            dp[i] += dp[i - <span class="hljs-number">2</span>];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[n];<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>状态转移要注意判断 ‘0’ 的情况</li></ol></li></ul><h2 id="13-最长递增子序列1-最长递增子序列"><a href="#13-最长递增子序列1-最长递增子序列" class="headerlink" title="13. 最长递增子序列1 最长递增子序列"></a>13. 最长递增子序列1 最长递增子序列</h2><ul><li><p>题目：求最长递增子序列</p></li><li><p>思路：</p><ol><li>动态规划，dp[i] 记录为以第 i 个元素结尾的最长子序列长度，时间 O（n^2），空间 O（n）</li><li>贪心 + 二分查找，dp[i] 表示最终得到最长的递增序列的第 i 个元素，每次遍历到元素就二分查找更新位置，时间  O（nlogn），空间 O（n）</li></ol></li><li><p>题解：</p><ol><li><p>动规</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lengthOfLIS</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-comment">// 动态规划，dp[i] 记录为以第 i 个元素结尾的最长子序列长度，时间 O（n^2），空间 O（n）</span><br>        <span class="hljs-keyword">if</span> (nums.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-type">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length];<br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxans</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; nums.length; i++) &#123;<br>            dp[i] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br>                <span class="hljs-keyword">if</span> (nums[i] &gt; nums[j]) &#123;<br>                    dp[i] = Math.max(dp[i], dp[j] + <span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>            maxans = Math.max(maxans, dp[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> maxans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>贪心 + 二分查找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lengthOfLIS</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-comment">// 贪心 + 二分查找，dp[i] 表示最终得到最长的递增序列的第 i 个元素，每次遍历到元素就二分查找更新位置，时间  O（nlogn），空间 O（n）</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, n = nums.length;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-type">int</span>[] d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>];<br>        d[len] = nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] &gt; d[len]) &#123;<br>                d[++len] = nums[i];<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, r = len, pos = <span class="hljs-number">0</span>; <span class="hljs-comment">// 如果找不到说明所有的数都比 nums[i] 大，此时要更新 d[1]，所以这里将 pos 设为 0</span><br>                <span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">if</span> (d[mid] &lt; nums[i]) &#123;<br>                        pos = mid;<br>                        l = mid + <span class="hljs-number">1</span>;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        r = mid - <span class="hljs-number">1</span>;<br>                    &#125;<br>                &#125;<br>                d[pos + <span class="hljs-number">1</span>] = nums[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> len;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>求最长递增子序列很经典，必须熟练</li><li>最长递增子序列无法在 O（n）时间内得到，背 O（n^2）时间的即可</li><li>最长递增子序列的 dp 代表某位为结尾的最长递增子序列的长度</li></ol></li></ul><h2 id="14-最长递增子序列2-一组整数对能够构成的最长链"><a href="#14-最长递增子序列2-一组整数对能够构成的最长链" class="headerlink" title="14. 最长递增子序列2 一组整数对能够构成的最长链"></a>14. 最长递增子序列2 一组整数对能够构成的最长链</h2><ul><li><p>题目：要求将数对构成最长链，要求前数对两数小于后数对两数</p></li><li><p>思路：</p><ol><li>先通过第一个数字从小到大排序，然后在第二个位置上找递增的最长子序列，时间 O（n^2），空间 O（n）</li></ol></li><li><p>题解：</p><ol><li><p>动规</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findLongestChain</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] pairs)</span> &#123;<br>        <span class="hljs-comment">// 先通过第一个数字从小到大排序，然后在第二个位置上找递增的最长子序列，时间 O（n^2），空间 O（n）</span><br>        Arrays.sort(pairs, (a, b) -&gt; a[<span class="hljs-number">0</span>] - b[<span class="hljs-number">0</span>]);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> pairs.length;<br>        <span class="hljs-type">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br>        Arrays.fill(dp, <span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt; N; ++j) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; j; ++i) &#123;<br>                <span class="hljs-keyword">if</span> (pairs[i][<span class="hljs-number">1</span>] &lt; pairs[j][<span class="hljs-number">0</span>])<br>                    dp[j] = Math.max(dp[j], dp[i] + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x: dp) <span class="hljs-keyword">if</span> (x &gt; ans) ans = x;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>这个题可以转换成其他的场景，比如俄罗斯套娃信封问题，将一条边从小到大排序后，另一条边取最长子序列</li></ol></li></ul><h2 id="15-最长递增子序列3-最长摆动子序列"><a href="#15-最长递增子序列3-最长摆动子序列" class="headerlink" title="15. 最长递增子序列3 最长摆动子序列"></a>15. 最长递增子序列3 最长摆动子序列</h2><ul><li><p>题目：找到最长摆动子序列（lc376）</p></li><li><p>思路：</p><ol><li>动态规划方法，dp 为两个数组，一个是到某点为上升的最长子序列长度，一个是到某点为下降的最长子序列长度，可以优化成为两个变量，时间 O（n），空间 O（1）</li><li>贪心算法，只要不断地交错选择波峰和波谷就可以得到最长的子序列，时间 O（n），空间 O（1）</li></ol></li><li><p>题解：</p><ol><li><p>动规</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">wiggleMaxLength</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-comment">// 动态规划方法，dp 为两个数组，一个是到某点为上升的最长子序列长度，一个是到某点为下降的最长子序列长度，可以优化成为两个变量，时间 O（n），空间 O（1）</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length;<br>        <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">return</span> n;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">up</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, down = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] &gt; nums[i - <span class="hljs-number">1</span>]) &#123;<br>                up = Math.max(up, down + <span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[i] &lt; nums[i - <span class="hljs-number">1</span>]) &#123;<br>                down = Math.max(up + <span class="hljs-number">1</span>, down);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> Math.max(up, down);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>贪心</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">wiggleMaxLength</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-comment">// 贪心算法，只要不断地交错选择波峰和波谷就可以得到最长的子序列，时间 O（n），空间 O（1）</span><br>    <span class="hljs-keyword">if</span> (nums == <span class="hljs-literal">null</span> || nums.length == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">up</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, down = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; nums.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (nums[i] &gt; nums[i - <span class="hljs-number">1</span>]) &#123;<br>            up = down + <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[i] &lt; nums[i - <span class="hljs-number">1</span>]) &#123;<br>            down = up + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> Math.max(up, down);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>摆动序列不像递增序列那么麻烦，如果当前是上升，下一个如果还上升，就将序列里替换成这个大的，如果下降，直接加入序列；如果是递增序列，上升时候，下一个如果下降，还要回去小于这个点的最大的点</li><li>摆动序列的寻找是 O（n），所以挺多方法都能做，比如贪心，但是递增子序列就只能最快 O（nlogn）</li></ol></li></ul><h2 id="16-最长公共子序列1-最长公共子序列"><a href="#16-最长公共子序列1-最长公共子序列" class="headerlink" title="16. 最长公共子序列1 最长公共子序列"></a>16. 最长公共子序列1 最长公共子序列</h2><ul><li><p>题目：求两个字符串的最长公共子序列（lc1143）</p></li><li><p>思路：</p><ol><li>动态规划，dp 是二维矩阵，时间 O（mn），空间 O（mn）</li></ol></li><li><p>题解：</p><ol><li><p>动规</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">longestCommonSubsequence</span><span class="hljs-params">(String text1, String text2)</span> &#123;<br>    <span class="hljs-comment">// 动态规划，dp 是二维矩阵，时间 O（mn），空间 O（mn）</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> text1.length(), n2 = text2.length();<br>    <span class="hljs-type">int</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n1 + <span class="hljs-number">1</span>][n2 + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n1; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= n2; j++) &#123;<br>            <span class="hljs-keyword">if</span> (text1.charAt(i - <span class="hljs-number">1</span>) == text2.charAt(j - <span class="hljs-number">1</span>)) &#123;<br>                dp[i][j] = dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                dp[i][j] = Math.max(dp[i - <span class="hljs-number">1</span>][j], dp[i][j - <span class="hljs-number">1</span>]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[n1][n2];<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>这个题很有代表性，后面的 字符串编辑问题可看做是这道题的扩展，值得注意的是这个题的 dp 无法优化，只能是 mn 大小的矩阵</li></ol></li></ul><h2 id="17-背包问题1-0-1背包"><a href="#17-背包问题1-0-1背包" class="headerlink" title="17. 背包问题1 0-1背包"></a>17. 背包问题1 0-1背包</h2><ul><li><p>题目：背包大小为 N，物品有重量 w 和价值 v，问包能装下最大价值为多少（）</p></li><li><p>思路：</p><ol><li>动态规划，dp[i] [j] 代表前 i 件物品体积不超过 j 所能达到最大价值，状态转移方程为 dp[i] [j] &#x3D; max(dp[i - 1] [j], dp[i - 1] [j - w] + v)，可以空间优化，可以先遍历 i 也可先遍历 j，时间 O（mn）， 空间 O（m）</li></ol></li><li><p>题解：</p><ol><li><p>动规</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// W 为背包总体积</span><br><span class="hljs-comment">// N 为物品数量</span><br><span class="hljs-comment">// weights 数组存储 N 个物品的重量</span><br><span class="hljs-comment">// values 数组存储 N 个物品的价值</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">knapsack</span><span class="hljs-params">(<span class="hljs-type">int</span> W, <span class="hljs-type">int</span> N, <span class="hljs-type">int</span>[] weights, <span class="hljs-type">int</span>[] values)</span> &#123;<br>    <span class="hljs-type">int</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N + <span class="hljs-number">1</span>][W + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= N; i++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> weights[i - <span class="hljs-number">1</span>], v = values[i - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= W; j++) &#123;<br>            <span class="hljs-keyword">if</span> (j &gt;= w) &#123;<br>                dp[i][j] = Math.max(dp[i - <span class="hljs-number">1</span>][j], dp[i - <span class="hljs-number">1</span>][j - w] + v);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                dp[i][j] = dp[i - <span class="hljs-number">1</span>][j];<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[N][W];<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">knapsack</span><span class="hljs-params">(<span class="hljs-type">int</span> W, <span class="hljs-type">int</span> N, <span class="hljs-type">int</span>[] weights, <span class="hljs-type">int</span>[] values)</span> &#123;<br>    <span class="hljs-type">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[W + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= N; i++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> weights[i - <span class="hljs-number">1</span>], v = values[i - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> W; j &gt;= <span class="hljs-number">1</span>; j--) &#123;<br>            <span class="hljs-keyword">if</span> (j &gt;= w) &#123;<br>                dp[j] = Math.max(dp[j], dp[j - w] + v);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[W];<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>如果 dp 是矩阵，那么先遍历 i 或 j 都是可以的，因为遍历当前节点时候用到的左上方节点在两种遍历顺序中都是计算完了的</li><li>如果 dp 是矩阵，那么遍历时候内层循环从前往后和从后往前都是可行的，因为更新元素不会影响其他元素计算</li><li>如果 dp 优化为数组，那么遍历时候必须先遍历物品再遍历容量，因为状态转移方程中明确了每次使用到上一件物品，但是可能用到多种容量的 dp 矩阵矩阵中的元素值</li><li>如果 dp 优化为数组，那么内层遍历必须从后往前计算，因为物品只能用一次，从前到后会使用多次</li><li>如果是完全背包问题，物品的数量无无限，那么只需要在原来的代码中改为内层遍历从前到后即可（dp 优化为数组）</li><li>多重背包 -&gt; 物品数量有限制；多维费用背包 -&gt; 物品不仅有重量还有体积（dp 优化为矩阵）；其他 -&gt; 物品之间相互约束或者依赖</li><li>背包背某确定重量 -&gt; dp 为 boolean 数组；</li><li>背包问题考虑因素：遍历的先后顺序，物品是否可用无限次，物品的费用是否是多维，场景如何转化成背包问题，加入物品顺序不同是否算同情况，dp 数组选择什么数据类型，状态转移方程是什么，dp[0] 是否初始化为 1</li></ol></li></ul><h2 id="18-背包问题2-划分数组为和相等的两部分"><a href="#18-背包问题2-划分数组为和相等的两部分" class="headerlink" title="18. 背包问题2 划分数组为和相等的两部分"></a>18. 背包问题2 划分数组为和相等的两部分</h2><ul><li><p>题目：划分数组为和相等的两部分（lc416）</p></li><li><p>思路：</p><ol><li>可以看成一个背包大小为 sum&#x2F;2 的 0-1 背包问题，dp 不记录最大的 v，只记录是否可以刚好装满，设为 boolean 数组，时间 O（mn）， 空间 O（m）</li></ol></li><li><p>题解：</p><ol><li><p>动规</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canPartition</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-comment">// 可以看成一个背包大小为 sum/2 的 0-1 背包问题，dp 不记录最大的 v，只记录是否可以刚好装满，设为 boolean 数组，时间 O（mn）， 空间 O（m）</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> computeArraySum(nums);<br>    <span class="hljs-keyword">if</span> (sum % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">W</span> <span class="hljs-operator">=</span> sum / <span class="hljs-number">2</span>;<br>    <span class="hljs-type">boolean</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[W + <span class="hljs-number">1</span>];<br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;                 <span class="hljs-comment">// 0-1 背包一个物品只能用一次</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> W; i &gt;= num; i--) &#123;   <span class="hljs-comment">// 从后往前，先计算 dp[i] 再计算 dp[i-num]</span><br>            dp[i] = dp[i] || dp[i - num];  <span class="hljs-comment">// 背包重量是数字，没有价值，就只考虑 W </span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[W];<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">computeArraySum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>        sum += num;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>背包问题中物品有 w 和 v，w 用于限制，v 用于择优，这道题相当于只有 w，不用择优，就问能否装满，能否，所以用 boolean 数组当做 dp</li><li>背包问题的思想在于用一个嵌套的 for 循环同时考虑物品维度与限制维度，这种思想是不变的，至于场景，千变万化</li></ol></li></ul><h2 id="19-背包问题3-改变一组数的正负号使得它们的和为一给定数"><a href="#19-背包问题3-改变一组数的正负号使得它们的和为一给定数" class="headerlink" title="19. 背包问题3 改变一组数的正负号使得它们的和为一给定数"></a>19. 背包问题3 改变一组数的正负号使得它们的和为一给定数</h2><ul><li><p>题目：改变一组数的正负号使得它们的和为一给定数， 求表达式数目，同值元素视为不同项（lc494）</p></li><li><p>思路：</p><ol><li>转化为找到不同元素，使得和为 (sum + target) &#x2F; 2，dp 记录情况数，时间 O（mn）， 空间 O（m）</li></ol></li><li><p>题解：</p><ol><li><p>动规</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findTargetSumWays</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> S)</span> &#123;<br>    <span class="hljs-comment">// 转化为找到不同元素，使得和为 (sum + target) / 2，dp 记录情况数，时间 O（mn）， 空间 O（m）</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> computeArraySum(nums);<br>    <span class="hljs-keyword">if</span> (sum &lt; S || (sum + S) % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">W</span> <span class="hljs-operator">=</span> (sum + S) / <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[W + <span class="hljs-number">1</span>];<br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> W; i &gt;= num; i--) &#123;<br>            dp[i] = dp[i] + dp[i - num];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[W];<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">computeArraySum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>        sum += num;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>题眼在于转化求多项式为找和为定值的元素子集，这里 dp 记录的不是背包内的价值，而是当前背包中的不同情况数量</li></ol></li></ul><h2 id="20-背包问题4-01-字符串构成最多的字符串"><a href="#20-背包问题4-01-字符串构成最多的字符串" class="headerlink" title="20. 背包问题4 01 字符串构成最多的字符串"></a>20. 背包问题4 01 字符串构成最多的字符串</h2><ul><li><p>题目：在一个字符串数组里找最大的字符串子集，要求所有字符串中 0 和 1 满足要求数目（lc474）</p></li><li><p>思路：</p><ol><li>多维费用的 0-1 背包问题，有两个背包大小，0 的数量和 1 的数量，dp 表示满足要求的子集可能数，时间 O（lmn）， 空间 O（mn）</li></ol></li><li><p>题解：</p><ol><li><p>动规</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findMaxForm</span><span class="hljs-params">(String[] strs, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-comment">// 多维费用的 0-1 背包问题，有两个背包大小，0 的数量和 1 的数量，dp 表示满足要求的子集可能数，时间 O（lmn）， 空间 O（mn）</span><br>    <span class="hljs-keyword">if</span> (strs == <span class="hljs-literal">null</span> || strs.length == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[m + <span class="hljs-number">1</span>][n + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (String s : strs) &#123;    <span class="hljs-comment">// 每个字符串只能用一次</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">ones</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, zeros = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : s.toCharArray()) &#123;<br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>                zeros++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                ones++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> m; i &gt;= zeros; i--) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> n; j &gt;= ones; j--) &#123;<br>                dp[i][j] = Math.max(dp[i][j], dp[i - zeros][j - ones] + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[m][n];<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>多维背包问题就设置三维矩阵 dp，优化空间为 二位矩阵 dp</li></ol></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92.md">CS-Notes&#x2F;Leetcode 题解 - 动态规划.md at master · CyC2018&#x2F;CS-Notes (github.com)</a></li><li><a href="https://leetcode.cn/problemset/all/?topicSlugs=dynamic-programming&page=1">题库 - 力扣 (LeetCode) 全球极客挚爱的技术成长平台</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>专项算法题目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法专项精选题 - 动态规划（一）</title>
    <link href="/2022/06/21/%E7%AE%97%E6%B3%95/%E4%B8%93%E9%A1%B9%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/algorithm7/"/>
    <url>/2022/06/21/%E7%AE%97%E6%B3%95/%E4%B8%93%E9%A1%B9%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/algorithm7/</url>
    
    <content type="html"><![CDATA[<h1 id="动态规划（一）"><a href="#动态规划（一）" class="headerlink" title="动态规划（一）"></a>动态规划（一）</h1><h2 id="1-Fibonacci1-爬楼梯"><a href="#1-Fibonacci1-爬楼梯" class="headerlink" title="1. Fibonacci1 爬楼梯"></a>1. Fibonacci1 爬楼梯</h2><ul><li><p>题目：每次爬楼梯可以上 1 或 2 阶，求 n 阶有多少中上法（lc70）</p></li><li><p>思路：</p><ol><li>只用两个变量记录两个位置的 Fibonacci 数，迭代计算得到第 n 个 Fibonacci 数，时间 O（n），空间 O（1）</li></ol></li><li><p>题解：</p><ol><li><p>Fibonacci</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 只用两个变量记录两个位置的 Fibonacci 数，迭代计算得到第 n 个 Fibonacci 数，时间 O（n），空间 O（1）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">climbStairs</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">int</span>[] fibonacci = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;;<br>        <span class="hljs-type">int</span> tmp, curr = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (curr++ != n) &#123;<br>            tmp = fibonacci[<span class="hljs-number">1</span>];<br>            fibonacci[<span class="hljs-number">1</span>] += fibonacci[<span class="hljs-number">0</span>];<br>            fibonacci[<span class="hljs-number">0</span>] = tmp;<br>        &#125;<br>        <span class="hljs-keyword">return</span> fibonacci[<span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>要灵活使用 Fibonacci 数，将一些递归问题转化成 Fibonacci 可解决的问题。</li></ol></li></ul><h2 id="2-Fibonacci2-强盗抢劫"><a href="#2-Fibonacci2-强盗抢劫" class="headerlink" title="2. Fibonacci2 强盗抢劫"></a>2. Fibonacci2 强盗抢劫</h2><ul><li><p>题目：抢劫一排住户，不能连续抢，求最高受益（lc198）</p></li><li><p>思路：</p><ol><li>动态规划，dp 存储抢到第 i 家的最高受益，时间 O（n），空间 O（1）</li></ol></li><li><p>题解：</p><ol><li><p>动规</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">rob</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-comment">// 动态规划，dp 存储抢到第 i 家的最高受益，时间 O（n），空间 O（1）</span><br>        <span class="hljs-keyword">if</span> (nums == <span class="hljs-literal">null</span> || nums.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span>[] maxRob = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;<span class="hljs-number">0</span>, nums[<span class="hljs-number">0</span>]&#125;;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, tmp;<br>        <span class="hljs-keyword">while</span> (curr != nums.length) &#123;<br>            tmp = maxRob[<span class="hljs-number">1</span>];<br>            maxRob[<span class="hljs-number">1</span>] = Math.max(maxRob[<span class="hljs-number">0</span>] + nums[curr], maxRob[<span class="hljs-number">1</span>]);<br>            maxRob[<span class="hljs-number">0</span>] = tmp;<br>            curr++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> maxRob[<span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>动态规划问题使用迭代方法求解时，一般都可以简化 dp</li></ol></li></ul><h2 id="3-Fibonacci3-强盗在环形街区抢劫"><a href="#3-Fibonacci3-强盗在环形街区抢劫" class="headerlink" title="3. Fibonacci3 强盗在环形街区抢劫"></a>3. Fibonacci3 强盗在环形街区抢劫</h2><ul><li><p>题目：强盗在环形街区抢劫，求最高受益（lc213）</p></li><li><p>思路：</p><ol><li>抢劫问题在一排住户情况下的进阶，可以分情况解决，打劫第一个到倒数第二个的受益，和打劫第二个到倒数第一个的受益，返回最大值，时间 O（n），空间 O（1）</li></ol></li><li><p>题解：</p><ol><li><p>动规</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抢劫问题在一排住户情况下的进阶，可以分情况解决，打劫第一个到倒数第二个的受益，和打劫第二个到倒数第一个的受益，返回最大值，时间 O（n），空间 O（1）</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">rob</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-keyword">if</span> (nums == <span class="hljs-literal">null</span> || nums.length == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> Math.max(rob(nums, <span class="hljs-number">0</span>, n - <span class="hljs-number">2</span>), rob(nums, <span class="hljs-number">1</span>, n - <span class="hljs-number">1</span>));<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">rob</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> first, <span class="hljs-type">int</span> last)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">pre2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, pre1 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> first; i &lt;= last; i++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> Math.max(pre1, pre2 + nums[i]);<br>        pre2 = pre1;<br>        pre1 = cur;<br>    &#125;<br>    <span class="hljs-keyword">return</span> pre1;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>环形可以看成是直线的进阶，分情况讨论可以简化难题</li></ol></li></ul><h2 id="4-Fibonacci4-信件错排"><a href="#4-Fibonacci4-信件错排" class="headerlink" title="4. Fibonacci4 信件错排"></a>4. Fibonacci4 信件错排</h2><ul><li>题目：n 个信封和对应信件打乱，求全部装错的情况数（?）</li><li>思路：<ol><li>定义一个数组 dp 存储错误方式数量，dp[i] 表示前 i 个信和信封的错误方式数量。假设第 i 个信装到第 j 个信封里面，而第 j 个信装到第 k 个信封里面。根据 i 和 k 是否相等，有两种情况：i&#x3D;&#x3D;k，交换 i 和 j 的信后，它们的信和信封在正确的位置，但是其余 i-2 封信有 dp[i-2] 种错误装信的方式。由于 j 有 i-1 种取值，因此共有 (i-1)*dp[i-2] 种错误装信方式。i !&#x3D; k，交换 i 和 j 的信后，第 i 个信和信封在正确的位置，其余 i-1 封信有 dp[i-1] 种错误装信方式。由于 j 有 i-1 种取值，因此共有 (i-1)*dp[i-1] 种错误装信方式。综上所述，错误装信数量方式数量为：dp[i] &#x3D; (i - 1) * dp[i - 2] + (i - 1) * dp[i - 1]，时间 O（n），空间 O（1）</li></ol></li><li>题解：<ol><li>遍历，dp 用三个变量即可</li></ol></li><li>小结：<ol><li>将信封交换是很灵性的操作，难以解决的动规问题终究只要找到状态转移方程就能迎刃而解</li><li>状态转移方程的寻找可以考虑分情况讨论</li></ol></li></ul><h2 id="5-Fibonacci5-母牛生产"><a href="#5-Fibonacci5-母牛生产" class="headerlink" title="5. Fibonacci5 母牛生产"></a>5. Fibonacci5 母牛生产</h2><ul><li>题目：母牛不死，每年生一头，三年成熟，n 年后牛数（?）</li><li>思路：<ol><li>当年的成熟母牛数量是三年前的牛数，遍历求解即可，时间 O（n），空间 O（1）</li></ol></li><li>题解：<ol><li>dp[i] &#x3D; dp[i - 1] + dp[i - 3]</li></ol></li><li>小结：<ol><li>Fibonacci 类型题目都可以找到相似的状态转移方程</li></ol></li></ul><h2 id="6-矩阵路径1-矩阵的最小路径和"><a href="#6-矩阵路径1-矩阵的最小路径和" class="headerlink" title="6. 矩阵路径1 矩阵的最小路径和"></a>6. 矩阵路径1 矩阵的最小路径和</h2><ul><li><p>题目：求从矩阵的左上角到右下角的最小路径和，每次只能向右和向下移动（lc64）</p></li><li><p>思路：</p><ol><li>dp 是一个矩阵，代表到每个位置的最小路径和，安排遍历，dp可以简化成一个数组，每个位置取上左两数中小的那个，时间 O（mn），空间 O（m）</li></ol></li><li><p>题解：</p><ol><li><p>动规</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minPathSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] grid)</span> &#123;<br>        <span class="hljs-comment">// dp 是一个矩阵，代表到每个位置的最小路径和，安排遍历，dp可以简化成一个数组，每个位置取上左两数中小的那个，时间 O（mn），空间 O（m）</span><br>        <span class="hljs-keyword">if</span> (grid == <span class="hljs-literal">null</span> || grid.length == <span class="hljs-number">0</span> || grid[<span class="hljs-number">0</span>].length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span>[] record = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[grid.length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; y &lt; grid[<span class="hljs-number">0</span>].length; y++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; x &lt; grid.length; x++) &#123;<br>                <span class="hljs-keyword">if</span> (x == <span class="hljs-number">0</span>) record[x] = record[x] + grid[x][y];<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (y == <span class="hljs-number">0</span>) record[x] = grid[x][y] + record[x - <span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">else</span> record[x] = grid[x][y] + Math.min(record[x], record[x - <span class="hljs-number">1</span>]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> record[grid.length - <span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>矩阵最小路径和问题和背包问题很像，同样是对一个矩阵遍历计算，同样可以将矩阵简化为一行或一列的数组，不过矩阵路径中dp[i] [j] 的含义比较清晰，但是背包问题中的 dp[i] [j] 比较难以理解，</li></ol></li></ul><h2 id="7-矩阵路径2-矩阵的总路径数"><a href="#7-矩阵路径2-矩阵的总路径数" class="headerlink" title="7. 矩阵路径2 矩阵的总路径数"></a>7. 矩阵路径2 矩阵的总路径数</h2><ul><li><p>题目：统计矩阵左上到右下的路径数目，每次只能向右向下移动（lc62）</p></li><li><p>思路：</p><ol><li>遍历计算，时间 O(mn)，空间 O（m）</li><li>可以遍历计算但没必要，总路程步数相同只是选 m 个位置向下走，可以用组合解决，时间 O（m），空间 O（1）</li></ol></li><li><p>题解：</p><ol><li><p>遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">uniquePaths</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-comment">// 遍历计算，时间 O(mn)，空间 O（m）</span><br>    <span class="hljs-type">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>    Arrays.fill(dp, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt; n; j++) &#123;<br>            dp[j] = dp[j] + dp[j - <span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[n - <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>数学</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">uniquePaths</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-comment">// 可以遍历计算但没必要，总路程步数相同只是选 m 个位置向下走，可以用组合解决，时间 O（m），空间 O（1）</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">S</span> <span class="hljs-operator">=</span> m + n - <span class="hljs-number">2</span>;  <span class="hljs-comment">// 总共的移动次数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">D</span> <span class="hljs-operator">=</span> m - <span class="hljs-number">1</span>;      <span class="hljs-comment">// 向下的移动次数</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= D; i++) &#123;<br>        ret = ret * (S - D + i) / i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>) ret;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>路程问题某种情况下可以转化成组合问题</li></ol></li></ul><h2 id="8-数组区间1-数组区间和"><a href="#8-数组区间1-数组区间和" class="headerlink" title="8. 数组区间1 数组区间和"></a>8. 数组区间1 数组区间和</h2><ul><li><p>题目：给定数组，每次返回某区间和（lc303）</p></li><li><p>思路：</p><ol><li>看似简单，但其实是要记录数组 sum，用 sum[j] - sum[i] 计算区间和，这样时间 O（1），空间 O（n）</li></ol></li><li><p>题解：</p><ol><li><p>前缀和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">NumArray</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] sums;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NumArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        sums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= nums.length; i++) &#123;<br>            sums[i] = sums[i - <span class="hljs-number">1</span>] + nums[i - <span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sumRange</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        <span class="hljs-keyword">return</span> sums[j + <span class="hljs-number">1</span>] - sums[i];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>前缀和是一种思维方式和解题技巧</li></ol></li></ul><h2 id="9-数组区间2-数组中等差递增子区间的个数"><a href="#9-数组区间2-数组中等差递增子区间的个数" class="headerlink" title="9. 数组区间2 数组中等差递增子区间的个数"></a>9. 数组区间2 数组中等差递增子区间的个数</h2><ul><li><p>题目：数组中至少三个连续元素组成的等差子数组的个数（lc413）</p></li><li><p>思路：</p><ol><li>动态规划，dp[i] &#x3D; dp[i-1] + 1，dp[i] 代表位置 i 结尾的等差子数组个数，最后求 dp 和，时间 O（n），空间 O（n）</li><li>空间优化的动态规划，记录当前的等差数列中元素个数，如果当前元素依旧满足等差数列要求，根据元素个数增加，否则，元素个数重置，时间 O（n），空间 O（1）</li></ol></li><li><p>题解：</p><ol><li><p>动规</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">numberOfArithmeticSlices</span><span class="hljs-params">(<span class="hljs-type">int</span>[] A)</span> &#123;<br>    <span class="hljs-comment">// 动态规划，dp[i] = dp[i-1] + 1，dp[i] 代表位置 i 结尾的等差子数组个数，最后求 dp 和，时间 O（n），空间 O（n）</span><br>    <span class="hljs-keyword">if</span> (A == <span class="hljs-literal">null</span> || A.length == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> A.length;<br>    <span class="hljs-type">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (A[i] - A[i - <span class="hljs-number">1</span>] == A[i - <span class="hljs-number">1</span>] - A[i - <span class="hljs-number">2</span>]) &#123;<br>            dp[i] = dp[i - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> cnt : dp) &#123;<br>        total += cnt;<br>    &#125;<br>    <span class="hljs-keyword">return</span> total;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>动规优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 空间优化的动态规划，记录当前的等差数列中元素个数，如果当前元素依旧满足等差数列要求，根据元素个数增加，否则，元素个数重置，时间 O（n），空间 O（1）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">numberOfArithmeticSlices</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-keyword">if</span> (nums == <span class="hljs-literal">null</span> || nums.length &lt; <span class="hljs-number">3</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, count = <span class="hljs-number">2</span>, curr = <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">while</span> (curr &lt; nums.length) &#123;<br>            <span class="hljs-keyword">if</span> (nums[curr] - nums[curr - <span class="hljs-number">1</span>] == nums[curr - <span class="hljs-number">1</span>] - nums[curr - <span class="hljs-number">2</span>]) sum += (++count - <span class="hljs-number">2</span>);<br>            <span class="hljs-keyword">else</span> count = <span class="hljs-number">2</span>;<br>            curr++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>动态规划可以解决很多问题，关键是设计 dp 和找到状态转移方程</li></ol></li></ul><h2 id="10-分割整数1-分割整数的最大乘积"><a href="#10-分割整数1-分割整数的最大乘积" class="headerlink" title="10. 分割整数1 分割整数的最大乘积"></a>10. 分割整数1 分割整数的最大乘积</h2><ul><li><p>题目：n 拆分成 k 个数的和，k 个数乘积最大（lc343）</p></li><li><p>思路：</p><ol><li>递归拆分，比较大小，时间 O（n^2），空间 O（n）</li></ol></li><li><p>题解：</p><ol><li><p>动规</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">integerBreak</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-type">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>];<br>    dp[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= i - <span class="hljs-number">1</span>; j++) &#123;<br>            dp[i] = Math.max(dp[i], Math.max(j * dp[i - j], j * (i - j)));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[n];<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>这题其实就是剪绳子（剑指 Offer 经典题目），有一个性质是剪绳子最终结果没有长度为 5 的绳子，剪出来的段都要尽量接近 e，所以是 3</li></ol></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92.md">CS-Notes&#x2F;Leetcode 题解 - 动态规划.md at master · CyC2018&#x2F;CS-Notes (github.com)</a></li><li><a href="https://leetcode.cn/problemset/all/?topicSlugs=dynamic-programming&page=1">题库 - 力扣 (LeetCode) 全球极客挚爱的技术成长平台</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>专项算法题目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法专项精选题 - 树（四）</title>
    <link href="/2022/06/21/%E7%AE%97%E6%B3%95/%E4%B8%93%E9%A1%B9%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/algorithm6/"/>
    <url>/2022/06/21/%E7%AE%97%E6%B3%95/%E4%B8%93%E9%A1%B9%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/algorithm6/</url>
    
    <content type="html"><![CDATA[<h1 id="树（四）"><a href="#树（四）" class="headerlink" title="树（四）"></a>树（四）</h1><h2 id="31-Trie2-实现一个-Trie-用来求前缀和"><a href="#31-Trie2-实现一个-Trie-用来求前缀和" class="headerlink" title="31. Trie2 实现一个 Trie 用来求前缀和"></a>31. Trie2 实现一个 Trie 用来求前缀和</h2><ul><li><p>题目：设计一个 map ，字符串表示键，整数表示值，可以返回具有前缀等于给定字符串的键的值的总和</p></li><li><p>思路：</p><ol><li>用 Trie 解决，时间 O（n），空间 O（26mn）</li></ol></li><li><p>题解：</p><ol><li><p>Trie</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MapSum</span> &#123;<br>    <span class="hljs-comment">// 用 Trie 解决，时间 O（n），空间 O（26mn）</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>        Node[] child = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>[<span class="hljs-number">26</span>];<br>        <span class="hljs-type">int</span> value;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Node</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MapSum</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String key, <span class="hljs-type">int</span> val)</span> &#123;<br>        insert(key, root, val);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String key, Node node, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">if</span> (key.length() == <span class="hljs-number">0</span>) &#123;<br>            node.value = val;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> indexForChar(key.charAt(<span class="hljs-number">0</span>));<br>        <span class="hljs-keyword">if</span> (node.child[index] == <span class="hljs-literal">null</span>) &#123;<br>            node.child[index] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();<br>        &#125;<br>        insert(key.substring(<span class="hljs-number">1</span>), node.child[index], val);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(String prefix)</span> &#123;<br>        <span class="hljs-keyword">return</span> sum(prefix, root);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(String prefix, Node node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (prefix.length() != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> indexForChar(prefix.charAt(<span class="hljs-number">0</span>));<br>            <span class="hljs-keyword">return</span> sum(prefix.substring(<span class="hljs-number">1</span>), node.child[index]);<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> node.value;<br>        <span class="hljs-keyword">for</span> (Node child : node.child) &#123;<br>            sum += sum(prefix, child);<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">indexForChar</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span> &#123;<br>        <span class="hljs-keyword">return</span> c - <span class="hljs-string">&#x27;a&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>前缀有关的题目，用前缀树</li></ol></li></ul><h2 id="32-高频1-二叉树中最大的路径和"><a href="#32-高频1-二叉树中最大的路径和" class="headerlink" title="32. 高频1 二叉树中最大的路径和"></a>32. 高频1 二叉树中最大的路径和</h2><ul><li><p>题目：二叉树中最大的路径和（lc124）</p></li><li><p>思路：</p><ol><li>递归计算二叉树每个节点的最大值路径（以该节点为路径端点），然后计算当前节点的最大路径，最大值更新到属性，时间 O（n），空间 O（n）</li></ol></li><li><p>题解：</p><ol><li><p>递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 递归计算二叉树每个节点的最大值路径（以该节点为路径端点），然后计算当前节点的最大路径，最大值更新到属性，时间 O（n），空间 O（n）</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">maxSum</span> <span class="hljs-operator">=</span> Integer.MIN_VALUE;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxPathSum</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        maxGain(root);<br>        <span class="hljs-keyword">return</span> maxSum;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxGain</span><span class="hljs-params">(TreeNode node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <br>        <span class="hljs-comment">// 递归计算左右子节点的最大贡献值</span><br>        <span class="hljs-comment">// 只有在最大贡献值大于 0 时，才会选取对应子节点</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">leftGain</span> <span class="hljs-operator">=</span> Math.max(maxGain(node.left), <span class="hljs-number">0</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rightGain</span> <span class="hljs-operator">=</span> Math.max(maxGain(node.right), <span class="hljs-number">0</span>);<br><br>        <span class="hljs-comment">// 节点的最大路径和取决于该节点的值与该节点的左右子节点的最大贡献值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">priceNewpath</span> <span class="hljs-operator">=</span> node.val + leftGain + rightGain;<br><br>        <span class="hljs-comment">// 更新答案</span><br>        maxSum = Math.max(maxSum, priceNewpath);<br><br>        <span class="hljs-comment">// 返回节点的最大贡献值</span><br>        <span class="hljs-keyword">return</span> node.val + Math.max(leftGain, rightGain);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>自己写的是用 HashMap 存中间的结果，实际上不需要，一次 DFS 即可</li></ol></li></ul><h2 id="33-高频2-不同的二叉搜索树"><a href="#33-高频2-不同的二叉搜索树" class="headerlink" title="33. 高频2 不同的二叉搜索树"></a>33. 高频2 不同的二叉搜索树</h2><ul><li><p>题目：连续 n 个数可构成的不同的二叉搜索树个数（lc96）</p></li><li><p>思路：</p><ol><li>迭代计算选择不同点做树根后左右子树可能的个数，时间 O（n^2），空间 O（n）</li><li>动态规划，思路一致，时间 O（n^2），空间 O（n）</li><li>数学方法，<img src="/img/algorithm/img/06.png" alt="06">，时间 O（n），空间 O（1)</li></ol></li><li><p>题解：</p><ol><li><p>动态规划递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-comment">// 迭代计算选择不同点做树根后左右子树可能的个数，时间 O（n^2），空间 O（n）</span><br>    <span class="hljs-keyword">private</span> HashMap&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer, Integer&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">numTrees</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (map.containsKey(n)) <span class="hljs-keyword">return</span> map.get(n);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            count += (numTrees(i - <span class="hljs-number">1</span>) * numTrees(n - i));<br>        &#125;<br>        map.put(n,count);<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>动态规划迭代</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 动态规划，思路一致，时间 O（n^2），空间 O（n）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">numTrees</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">int</span>[] G = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>];<br>        G[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        G[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;= n; ++i) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= i; ++j) &#123;<br>                G[i] += G[j - <span class="hljs-number">1</span>] * G[i - j];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> G[n];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>卡特兰数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 数学方法，卡塔兰数，时间 O（n），空间 O（1)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">numTrees</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-comment">// 提示：我们在这里需要用 long 类型防止计算过程中的溢出</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">C</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            C = C * <span class="hljs-number">2</span> * (<span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>) / (i + <span class="hljs-number">2</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>) C;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>卡塔兰数，C{n} &#x3D; (4n - 2) &#x2F; (n + 1) C{n-1}</li></ol></li></ul><h2 id="34-高频3-由中序与后序遍历构造二叉树"><a href="#34-高频3-由中序与后序遍历构造二叉树" class="headerlink" title="34. 高频3 由中序与后序遍历构造二叉树"></a>34. 高频3 由中序与后序遍历构造二叉树</h2><ul><li><p>题目：由中序与后序遍历构造二叉树（lc106）</p></li><li><p>思路：</p><ol><li>借由哈希表存储每次递归到的根节点在 inorder 当中的位置，这样在递归构造二叉树时候可以快速分开左右子树，时间 O（n），空间 O（n）</li><li>迭代构造，是用前序和中序遍历构造二叉树的迭代的变体，比较难记，但是算法很巧妙，时间 O（n），空间 O（n）</li></ol></li><li><p>题解：</p><ol><li><p>递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 借由哈希表存储每次递归到的根节点在 inorder 当中的位置，这样在递归构造二叉树时候可以快速分开左右子树，时间 O（n），空间 O（n）</span><br>    <span class="hljs-type">int</span> post_idx;<br>    <span class="hljs-type">int</span>[] postorder;<br>    <span class="hljs-type">int</span>[] inorder;<br>    Map&lt;Integer, Integer&gt; idx_map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer, Integer&gt;();<br><br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">helper</span><span class="hljs-params">(<span class="hljs-type">int</span> in_left, <span class="hljs-type">int</span> in_right)</span> &#123;<br>        <span class="hljs-comment">// 如果这里没有节点构造二叉树了，就结束</span><br>        <span class="hljs-keyword">if</span> (in_left &gt; in_right) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 选择 post_idx 位置的元素作为当前子树根节点</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">root_val</span> <span class="hljs-operator">=</span> postorder[post_idx];<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(root_val);<br><br>        <span class="hljs-comment">// 根据 root 所在位置分成左右两棵子树</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> idx_map.get(root_val);<br><br>        <span class="hljs-comment">// 下标减一</span><br>        post_idx--;<br>        <span class="hljs-comment">// 构造右子树</span><br>        root.right = helper(index + <span class="hljs-number">1</span>, in_right);<br>        <span class="hljs-comment">// 构造左子树</span><br>        root.left = helper(in_left, index - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">buildTree</span><span class="hljs-params">(<span class="hljs-type">int</span>[] inorder, <span class="hljs-type">int</span>[] postorder)</span> &#123;<br>        <span class="hljs-built_in">this</span>.postorder = postorder;<br>        <span class="hljs-built_in">this</span>.inorder = inorder;<br>        <span class="hljs-comment">// 从后序遍历的最后一个元素开始</span><br>        post_idx = postorder.length - <span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">// 建立（元素，下标）键值对的哈希表</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (Integer val : inorder) &#123;<br>            idx_map.put(val, idx++);<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> helper(<span class="hljs-number">0</span>, inorder.length - <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>前中序遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 迭代构造，是用前序和中序遍历构造二叉树的迭代的变体，比较难记，但是算法很巧妙，时间 O（n），空间 O（n）</span><br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">buildTree</span><span class="hljs-params">(<span class="hljs-type">int</span>[] inorder, <span class="hljs-type">int</span>[] postorder)</span> &#123;<br>        <span class="hljs-keyword">if</span> (postorder == <span class="hljs-literal">null</span> || postorder.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(postorder[postorder.length - <span class="hljs-number">1</span>]);<br>        Deque&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;TreeNode&gt;();<br>        stack.push(root);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">inorderIndex</span> <span class="hljs-operator">=</span> inorder.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> postorder.length - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">postorderVal</span> <span class="hljs-operator">=</span> postorder[i];<br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> stack.peek();<br>            <span class="hljs-keyword">if</span> (node.val != inorder[inorderIndex]) &#123;<br>                node.right = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(postorderVal);<br>                stack.push(node.right);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">while</span> (!stack.isEmpty() &amp;&amp; stack.peek().val == inorder[inorderIndex]) &#123;<br>                    node = stack.pop();<br>                    inorderIndex--;<br>                &#125;<br>                node.left = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(postorderVal);<br>                stack.push(node.left);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 使用前序和中序构造的代码，参考</span><br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">buildTree</span><span class="hljs-params">(<span class="hljs-type">int</span>[] preorder, <span class="hljs-type">int</span>[] inorder)</span> &#123;<br>        <span class="hljs-keyword">if</span> (preorder == <span class="hljs-literal">null</span> || preorder.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(preorder[<span class="hljs-number">0</span>]);<br>        Deque&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;TreeNode&gt;();<br>        stack.push(root);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">inorderIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; preorder.length; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">preorderVal</span> <span class="hljs-operator">=</span> preorder[i];<br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> stack.peek();<br>            <span class="hljs-keyword">if</span> (node.val != inorder[inorderIndex]) &#123;<br>                node.left = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(preorderVal);<br>                stack.push(node.left);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">while</span> (!stack.isEmpty() &amp;&amp; stack.peek().val == inorder[inorderIndex]) &#123;<br>                    node = stack.pop();<br>                    inorderIndex++;<br>                &#125;<br>                node.right = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(preorderVal);<br>                stack.push(node.right);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ul><h2 id="35-高频4-二叉树的序列化和反序列化"><a href="#35-高频4-二叉树的序列化和反序列化" class="headerlink" title="35. 高频4 二叉树的序列化和反序列化"></a>35. 高频4 二叉树的序列化和反序列化</h2><ul><li><p>题目：二叉树的序列化和反序列化（lc297）</p></li><li><p>思路：</p><ol><li>一种先序遍历的序列化方法，时间 O（n），空间 O（n）</li><li>用 x 代表 null，用括号包起来左右子树，时间 O（n），空间 O（n）</li><li>讲个笑话，Java 解答里最快的解法，时间 O（1），空间 O（n）</li></ol></li><li><p>题解：</p><ol><li><p>先序遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Codec</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">serialize</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">return</span> rserialize(root, <span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>  <br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">deserialize</span><span class="hljs-params">(String data)</span> &#123;<br>        String[] dataArray = data.split(<span class="hljs-string">&quot;,&quot;</span>);<br>        List&lt;String&gt; dataList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;String&gt;(Arrays.asList(dataArray));<br>        <span class="hljs-keyword">return</span> rdeserialize(dataList);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">rserialize</span><span class="hljs-params">(TreeNode root, String str)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            str += <span class="hljs-string">&quot;None,&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            str += str.valueOf(root.val) + <span class="hljs-string">&quot;,&quot;</span>;<br>            str = rserialize(root.left, str);<br>            str = rserialize(root.right, str);<br>        &#125;<br>        <span class="hljs-keyword">return</span> str;<br>    &#125;<br>  <br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">rdeserialize</span><span class="hljs-params">(List&lt;String&gt; dataList)</span> &#123;<br>        <span class="hljs-keyword">if</span> (dataList.get(<span class="hljs-number">0</span>).equals(<span class="hljs-string">&quot;None&quot;</span>)) &#123;<br>            dataList.remove(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>  <br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(Integer.valueOf(dataList.get(<span class="hljs-number">0</span>)));<br>        dataList.remove(<span class="hljs-number">0</span>);<br>        root.left = rdeserialize(dataList);<br>        root.right = rdeserialize(dataList);<br>    <br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>记录 null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Codec</span> &#123;<br>    <span class="hljs-comment">// 用 x 代表 null，用括号包起来左右子树，时间 O（n），空间 O（n）</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">serialize</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;X&quot;</span>;<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(&quot;</span> + serialize(root.left) + <span class="hljs-string">&quot;)&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(&quot;</span> + serialize(root.right) + <span class="hljs-string">&quot;)&quot;</span>;<br>        <span class="hljs-keyword">return</span> left + root.val + right;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">deserialize</span><span class="hljs-params">(String data)</span> &#123;<br>        <span class="hljs-type">int</span>[] ptr = &#123;<span class="hljs-number">0</span>&#125;; <span class="hljs-comment">// 我不理解为什么不设个属性 Integer 啊</span><br>        <span class="hljs-keyword">return</span> parse(data, ptr);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">parse</span><span class="hljs-params">(String data, <span class="hljs-type">int</span>[] ptr)</span> &#123;<br>        <span class="hljs-keyword">if</span> (data.charAt(ptr[<span class="hljs-number">0</span>]) == <span class="hljs-string">&#x27;X&#x27;</span>) &#123;<br>            ++ptr[<span class="hljs-number">0</span>];<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(<span class="hljs-number">0</span>);<br>        cur.left = parseSubtree(data, ptr);<br>        cur.val = parseInt(data, ptr);<br>        cur.right = parseSubtree(data, ptr);<br>        <span class="hljs-keyword">return</span> cur;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">parseSubtree</span><span class="hljs-params">(String data, <span class="hljs-type">int</span>[] ptr)</span> &#123;<br>        ++ptr[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 跳过左括号</span><br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">subtree</span> <span class="hljs-operator">=</span> parse(data, ptr);<br>        ++ptr[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 跳过右括号</span><br>        <span class="hljs-keyword">return</span> subtree;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">parseInt</span><span class="hljs-params">(String data, <span class="hljs-type">int</span>[] ptr)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, sgn = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (!Character.isDigit(data.charAt(ptr[<span class="hljs-number">0</span>]))) &#123;<br>            sgn = -<span class="hljs-number">1</span>;<br>            ++ptr[<span class="hljs-number">0</span>];<br>        &#125;<br>        <span class="hljs-keyword">while</span> (Character.isDigit(data.charAt(ptr[<span class="hljs-number">0</span>]))) &#123;<br>            x = x * <span class="hljs-number">10</span> + data.charAt(ptr[<span class="hljs-number">0</span>]++) - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> x * sgn;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>面向刷题编程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Codec</span> &#123;<br>    <span class="hljs-comment">// 讲个笑话，Java 解答里最快的解法，时间 O（1），空间 O（n）</span><br>    <span class="hljs-keyword">static</span> TreeNode node;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">serialize</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        node = root;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">deserialize</span><span class="hljs-params">(String data)</span> &#123;<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>String 的 split 方法不会把最后的空串保留</li><li>Character.isDigit 方法可以判断是否为数字</li></ol></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E6%A0%91.md">CS-Notes&#x2F;Leetcode 题解 - 树.md at master · CyC2018&#x2F;CS-Notes (github.com)</a></li><li><a href="https://leetcode.cn/problemset/all/?topicSlugs=tree&page=1&sorting=W3t9XQ==">题库 - 力扣 (LeetCode) 全球极客挚爱的技术成长平台</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>专项算法题目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>data structure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法专项精选题 - 树（三）</title>
    <link href="/2022/06/21/%E7%AE%97%E6%B3%95/%E4%B8%93%E9%A1%B9%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/algorithm5/"/>
    <url>/2022/06/21/%E7%AE%97%E6%B3%95/%E4%B8%93%E9%A1%B9%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/algorithm5/</url>
    
    <content type="html"><![CDATA[<h1 id="树（三）"><a href="#树（三）" class="headerlink" title="树（三）"></a>树（三）</h1><h2 id="21-BST2-寻找二叉查找树第-k-个元素"><a href="#21-BST2-寻找二叉查找树第-k-个元素" class="headerlink" title="21. BST2 寻找二叉查找树第 k 个元素"></a>21. BST2 寻找二叉查找树第 k 个元素</h2><ul><li><p>题目：返回 BST 中第 k 小大的元素（lc230）</p></li><li><p>思路：</p><ol><li>中序遍历，时间 O（n），空间 O（n）</li><li>迭代计算子树节点数，左子树节点数为 k-1 时返回当前节点，时间 O（n），空间 O（n）</li><li>如果二叉搜索树经常被修改（插入&#x2F;删除操作）并且你需要频繁地查找第 k 小的值，就将 BST 转化成 AVL 树，时间 O（n），空间 O（n）</li></ol></li><li><p>题解：</p><ol><li><p>中序遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">kthSmallest</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-comment">// 中序遍历，时间 O（n），空间 O（n）</span><br>        Deque&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;TreeNode&gt;();<br>        <span class="hljs-keyword">while</span> (root != <span class="hljs-literal">null</span> || !stack.isEmpty()) &#123;<br>            <span class="hljs-keyword">while</span> (root != <span class="hljs-literal">null</span>) &#123;<br>                stack.push(root);<br>                root = root.left;<br>            &#125;<br>            root = stack.pop();<br>            --k;<br>            <span class="hljs-keyword">if</span> (k == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            root = root.right;<br>        &#125;<br>        <span class="hljs-keyword">return</span> root.val;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 递归代码</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">cnt</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> val;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">kthSmallest</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> k)</span> &#123;<br>        inOrder(root, k);<br>        <span class="hljs-keyword">return</span> val;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inOrder</span><span class="hljs-params">(TreeNode node, <span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br>        inOrder(node.left, k);<br>        cnt++;<br>        <span class="hljs-keyword">if</span> (cnt == k) &#123;<br>            val = node.val;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        inOrder(node.right, k);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>计算子树节点数目</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 迭代计算子树节点数，左子树节点数为 k-1 时返回当前节点，时间 O（n），空间 O（n）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">kthSmallest</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-type">MyBst</span> <span class="hljs-variable">bst</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyBst</span>(root);<br>        <span class="hljs-keyword">return</span> bst.kthSmallest(k);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBst</span> &#123;<br>    TreeNode root;<br>    Map&lt;TreeNode, Integer&gt; nodeNum;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyBst</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-built_in">this</span>.root = root;<br>        <span class="hljs-built_in">this</span>.nodeNum = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;TreeNode, Integer&gt;();<br>        countNodeNum(root);<br>    &#125;<br><br>    <span class="hljs-comment">// 返回二叉搜索树中第k小的元素</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">kthSmallest</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> root;<br>        <span class="hljs-keyword">while</span> (node != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> getNodeNum(node.left);<br>            <span class="hljs-keyword">if</span> (left &lt; k - <span class="hljs-number">1</span>) &#123;<br>                node = node.right;<br>                k -= left + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (left == k - <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                node = node.left;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> node.val;<br>    &#125;<br><br>    <span class="hljs-comment">// 统计以node为根结点的子树的结点数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">countNodeNum</span><span class="hljs-params">(TreeNode node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        nodeNum.put(node, <span class="hljs-number">1</span> + countNodeNum(node.left) + countNodeNum(node.right));<br>        <span class="hljs-keyword">return</span> nodeNum.get(node);<br>    &#125;<br><br>    <span class="hljs-comment">// 获取以node为根结点的子树的结点数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNodeNum</span><span class="hljs-params">(TreeNode node)</span> &#123;<br>        <span class="hljs-keyword">return</span> nodeNum.getOrDefault(node, <span class="hljs-number">0</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">// 简洁写法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">kthSmallest</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">leftCnt</span> <span class="hljs-operator">=</span> count(root.left);<br>        <span class="hljs-keyword">if</span> (leftCnt == k - <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> root.val;<br>        <span class="hljs-keyword">if</span> (leftCnt &gt; k - <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> kthSmallest(root.left, k);<br>        <span class="hljs-keyword">return</span> kthSmallest(root.right, k - leftCnt - <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">count</span><span class="hljs-params">(TreeNode node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + count(node.left) + count(node.right);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>转 AVL 树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 如果二叉搜索树经常被修改（插入/删除操作）并且你需要频繁地查找第 k 小的值，就将 BST 转化成 AVL 树，时间 O（n），空间 O（n）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">kthSmallest</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-comment">// 中序遍历生成数值列表</span><br>        List&lt;Integer&gt; inorderList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>        inorder(root, inorderList);<br><br>        <span class="hljs-comment">// 构造平衡二叉搜索树</span><br>        <span class="hljs-type">AVL</span> <span class="hljs-variable">avl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AVL</span>(inorderList);<br><br>        <span class="hljs-comment">// 模拟1000次插入和删除操作</span><br>        <span class="hljs-type">int</span>[] randomNums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">1000</span>];<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; ++i) &#123;<br>            randomNums[i] = random.nextInt(<span class="hljs-number">10001</span>);<br>            avl.insert(randomNums[i]);<br>        &#125;<br>        shuffle(randomNums); <span class="hljs-comment">// 列表乱序</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; ++i) &#123;<br>            avl.delete(randomNums[i]);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> avl.kthSmallest(k);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inorder</span><span class="hljs-params">(TreeNode node, List&lt;Integer&gt; inorderList)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node.left != <span class="hljs-literal">null</span>) &#123;<br>            inorder(node.left, inorderList);<br>        &#125;<br>        inorderList.add(node.val);<br>        <span class="hljs-keyword">if</span> (node.right != <span class="hljs-literal">null</span>) &#123;<br>            inorder(node.right, inorderList);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shuffle</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> arr.length;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">randIndex</span> <span class="hljs-operator">=</span> random.nextInt(length);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[i];<br>            arr[i] = arr[randIndex];<br>            arr[randIndex] = temp;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 平衡二叉搜索树（AVL树）：允许重复值</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AVL</span> &#123;<br>    Node root;<br><br>    <span class="hljs-comment">// 平衡二叉搜索树结点</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>        <span class="hljs-type">int</span> val;<br>        Node parent;<br>        Node left;<br>        Node right;<br>        <span class="hljs-type">int</span> size;<br>        <span class="hljs-type">int</span> height;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>            <span class="hljs-built_in">this</span>(val, <span class="hljs-literal">null</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> val, Node parent)</span> &#123;<br>            <span class="hljs-built_in">this</span>(val, parent, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> val, Node parent, Node left, Node right)</span> &#123;<br>            <span class="hljs-built_in">this</span>.val = val;<br>            <span class="hljs-built_in">this</span>.parent = parent;<br>            <span class="hljs-built_in">this</span>.left = left;<br>            <span class="hljs-built_in">this</span>.right = right;<br>            <span class="hljs-built_in">this</span>.height = <span class="hljs-number">0</span>; <span class="hljs-comment">// 结点高度：以node为根节点的子树的高度（高度定义：叶结点的高度是0）</span><br>            <span class="hljs-built_in">this</span>.size = <span class="hljs-number">1</span>; <span class="hljs-comment">// 结点元素数：以node为根节点的子树的节点总数</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AVL</span><span class="hljs-params">(List&lt;Integer&gt; vals)</span> &#123;<br>        <span class="hljs-keyword">if</span> (vals != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.root = build(vals, <span class="hljs-number">0</span>, vals.size() - <span class="hljs-number">1</span>, <span class="hljs-literal">null</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 根据vals[l:r]构造平衡二叉搜索树 -&gt; 返回根结点</span><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">build</span><span class="hljs-params">(List&lt;Integer&gt; vals, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, Node parent)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(vals.get(m), parent);<br>        <span class="hljs-keyword">if</span> (l &lt;= m - <span class="hljs-number">1</span>) &#123;<br>            node.left = build(vals, l, m - <span class="hljs-number">1</span>, node);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (m + <span class="hljs-number">1</span> &lt;= r) &#123;<br>            node.right = build(vals, m + <span class="hljs-number">1</span>, r, node);<br>        &#125;<br>        recompute(node);<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回二叉搜索树中第k小的元素</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">kthSmallest</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> root;<br>        <span class="hljs-keyword">while</span> (node != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> getSize(node.left);<br>            <span class="hljs-keyword">if</span> (left &lt; k - <span class="hljs-number">1</span>) &#123;<br>                node = node.right;<br>                k -= left + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (left == k - <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                node = node.left;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> node.val;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> v)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            root = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(v);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 计算新结点的添加位置</span><br>            <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> subtreeSearch(root, v);<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isAddLeft</span> <span class="hljs-operator">=</span> v &lt;= node.val; <span class="hljs-comment">// 是否将新结点添加到node的左子结点</span><br>            <span class="hljs-keyword">if</span> (node.val == v) &#123; <span class="hljs-comment">// 如果值为v的结点已存在</span><br>                <span class="hljs-keyword">if</span> (node.left != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 值为v的结点存在左子结点，则添加到其左子树的最右侧</span><br>                    node = subtreeLast(node.left);<br>                    isAddLeft = <span class="hljs-literal">false</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 值为v的结点不存在左子结点，则添加到其左子结点</span><br>                    isAddLeft = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// 添加新结点</span><br>            <span class="hljs-type">Node</span> <span class="hljs-variable">leaf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(v, node);<br>            <span class="hljs-keyword">if</span> (isAddLeft) &#123;<br>                node.left = leaf;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                node.right = leaf;<br>            &#125;<br><br>            rebalance(leaf);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 删除值为v的结点 -&gt; 返回是否成功删除结点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-type">int</span> v)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> subtreeSearch(root, v);<br>        <span class="hljs-keyword">if</span> (node.val != v) &#123; <span class="hljs-comment">// 没有找到需要删除的结点</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 处理当前结点既有左子树也有右子树的情况</span><br>        <span class="hljs-comment">// 若左子树比右子树高度低，则将当前结点替换为右子树最左侧的结点，并移除右子树最左侧的结点</span><br>        <span class="hljs-comment">// 若右子树比左子树高度低，则将当前结点替换为左子树最右侧的结点，并移除左子树最右侧的结点</span><br>        <span class="hljs-keyword">if</span> (node.left != <span class="hljs-literal">null</span> &amp;&amp; node.right != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">replacement</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">if</span> (node.left.height &lt;= node.right.height) &#123;<br>                replacement = subtreeFirst(node.right);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                replacement = subtreeLast(node.left);<br>            &#125;<br>            node.val = replacement.val;<br>            node = replacement;<br>        &#125;<br><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> node.parent;<br>        delete(node);<br>        rebalance(parent);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 删除结点p并用它的子结点代替它，结点p至多只能有1个子结点</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node.left != <span class="hljs-literal">null</span> &amp;&amp; node.right != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>            <span class="hljs-comment">// throw new Exception(&quot;Node has two children&quot;);</span><br>        &#125;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> node.left != <span class="hljs-literal">null</span> ? node.left : node.right;<br>        <span class="hljs-keyword">if</span> (child != <span class="hljs-literal">null</span>) &#123;<br>            child.parent = node.parent;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (node == root) &#123;<br>            root = child;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> node.parent;<br>            <span class="hljs-keyword">if</span> (node == parent.left) &#123;<br>                parent.left = child;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                parent.right = child;<br>            &#125;<br>        &#125;<br>        node.parent = node;<br>    &#125;<br><br>    <span class="hljs-comment">// 在以node为根结点的子树中搜索值为v的结点，如果没有值为v的结点，则返回值为v的结点应该在的位置的父结点</span><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">subtreeSearch</span><span class="hljs-params">(Node node, <span class="hljs-type">int</span> v)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node.val &lt; v &amp;&amp; node.right != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> subtreeSearch(node.right, v);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (node.val &gt; v &amp;&amp; node.left != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> subtreeSearch(node.left, v);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> node;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 重新计算node结点的高度和元素数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">recompute</span><span class="hljs-params">(Node node)</span> &#123;<br>        node.height = <span class="hljs-number">1</span> + Math.max(getHeight(node.left), getHeight(node.right));<br>        node.size = <span class="hljs-number">1</span> + getSize(node.left) + getSize(node.right);<br>    &#125;<br><br>    <span class="hljs-comment">// 从node结点开始（含node结点）逐个向上重新平衡二叉树，并更新结点高度和元素数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rebalance</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-keyword">while</span> (node != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">oldHeight</span> <span class="hljs-operator">=</span> node.height, oldSize = node.size;<br>            <span class="hljs-keyword">if</span> (!isBalanced(node)) &#123;<br>                node = restructure(tallGrandchild(node));<br>                recompute(node.left);<br>                recompute(node.right);<br>            &#125;<br>            recompute(node);<br>            <span class="hljs-keyword">if</span> (node.height == oldHeight &amp;&amp; node.size == oldSize) &#123;<br>                node = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 如果结点高度和元素数都没有变化则不需要再继续向上调整</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                node = node.parent;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 判断node结点是否平衡</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isBalanced</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-keyword">return</span> Math.abs(getHeight(node.left) - getHeight(node.right)) &lt;= <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取node结点更高的子树</span><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">tallChild</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (getHeight(node.left) &gt; getHeight(node.right)) &#123;<br>            <span class="hljs-keyword">return</span> node.left;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> node.right;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取node结点更高的子树中的更高的子树</span><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">tallGrandchild</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> tallChild(node);<br>        <span class="hljs-keyword">return</span> tallChild(child);<br>    &#125;<br><br>    <span class="hljs-comment">// 重新连接父结点和子结点（子结点允许为空）</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">relink</span><span class="hljs-params">(Node parent, Node child, <span class="hljs-type">boolean</span> isLeft)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isLeft) &#123;<br>            parent.left = child;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            parent.right = child;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (child != <span class="hljs-literal">null</span>) &#123;<br>            child.parent = parent;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 旋转操作</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rotate</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> node.parent;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">grandparent</span> <span class="hljs-operator">=</span> parent.parent;<br>        <span class="hljs-keyword">if</span> (grandparent == <span class="hljs-literal">null</span>) &#123;<br>            root = node;<br>            node.parent = <span class="hljs-literal">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            relink(grandparent, node, parent == grandparent.left);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (node == parent.left) &#123;<br>            relink(parent, node.right, <span class="hljs-literal">true</span>);<br>            relink(node, parent, <span class="hljs-literal">false</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            relink(parent, node.left, <span class="hljs-literal">false</span>);<br>            relink(node, parent, <span class="hljs-literal">true</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// trinode操作</span><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">restructure</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> node.parent;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">grandparent</span> <span class="hljs-operator">=</span> parent.parent;<br><br>        <span class="hljs-keyword">if</span> ((node == parent.right) == (parent == grandparent.right)) &#123; <span class="hljs-comment">// 处理需要一次旋转的情况</span><br>            rotate(parent);<br>            <span class="hljs-keyword">return</span> parent;<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 处理需要两次旋转的情况：第1次旋转后即成为需要一次旋转的情况</span><br>            rotate(node);<br>            rotate(node);<br>            <span class="hljs-keyword">return</span> node;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回以node为根结点的子树的第1个元素</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Node <span class="hljs-title function_">subtreeFirst</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-keyword">while</span> (node.left != <span class="hljs-literal">null</span>) &#123;<br>            node = node.left;<br>        &#125;<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回以node为根结点的子树的最后1个元素</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Node <span class="hljs-title function_">subtreeLast</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-keyword">while</span> (node.right != <span class="hljs-literal">null</span>) &#123;<br>            node = node.right;<br>        &#125;<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取以node为根结点的子树的高度</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getHeight</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-keyword">return</span> node != <span class="hljs-literal">null</span> ? node.height : <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取以node为根结点的子树的结点数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-keyword">return</span> node != <span class="hljs-literal">null</span> ? node.size : <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>BST 左子树节点数个数就是树中比当前节点小的节点数个数</li><li>转 ALV 树的代码真猛啊</li></ol></li></ul><h2 id="22-BST3-BST-每个节点值加比它大的节点值"><a href="#22-BST3-BST-每个节点值加比它大的节点值" class="headerlink" title="22. BST3 BST 每个节点值加比它大的节点值"></a>22. BST3 BST 每个节点值加比它大的节点值</h2><ul><li><p>题目：BST 每个节点值加比它大的节点值（lc538）</p></li><li><p>思路：</p><ol><li>反序中序遍历，时间 O（n），空间 O（n）</li></ol></li><li><p>题解：</p><ol><li><p>先右后左的中序遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">convertBST</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        convertBST(root.right);<br>        root.val += sum;<br>        sum = root.val;<br>        convertBST(root.left);<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>反序小技巧</li></ol></li></ul><h2 id="23-BST4-BST-最近公共祖先"><a href="#23-BST4-BST-最近公共祖先" class="headerlink" title="23. BST4 BST 最近公共祖先"></a>23. BST4 BST 最近公共祖先</h2><ul><li><p>题目：找 BST 最近公共祖先（lc235）</p></li><li><p>思路：</p><ol><li>DFS 找到第一个落在两点值区间内的节点，时间 O（n），空间 O（n）</li></ol></li><li><p>题解：</p><ol><li><p>递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">lowestCommonAncestor</span><span class="hljs-params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;<br>    <span class="hljs-comment">// DFS 找到第一个落在两点值区间内的节点，时间 O（n），空间 O（n）</span><br>    <span class="hljs-keyword">if</span> (root.val &gt; p.val &amp;&amp; root.val &gt; q.val) <span class="hljs-keyword">return</span> lowestCommonAncestor(root.left, p, q);<br>    <span class="hljs-keyword">if</span> (root.val &lt; p.val &amp;&amp; root.val &lt; q.val) <span class="hljs-keyword">return</span> lowestCommonAncestor(root.right, p, q);<br>    <span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>BST 本身具有性质，最近公共祖先值一定落在两节点值间</li></ol></li></ul><h2 id="24-BST5-二叉树最近公共祖先"><a href="#24-BST5-二叉树最近公共祖先" class="headerlink" title="24. BST5 二叉树最近公共祖先"></a>24. BST5 二叉树最近公共祖先</h2><ul><li><p>题目：求二叉树最近公共祖先（lc236）</p></li><li><p>思路：</p><ol><li>DFS，当左右子树分别有 p 和 q 时候当前节点为解，时间 O（n），空间 O（n）</li></ol></li><li><p>题解：</p><ol><li><p>递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">lowestCommonAncestor</span><span class="hljs-params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;<br>    <span class="hljs-comment">// DFS，当左右子树分别有 p 和 q 时候当前节点为解，时间 O（n），空间 O（n）</span><br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span> || root == p || root == q) <span class="hljs-keyword">return</span> root;<br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> lowestCommonAncestor(root.left, p, q);<br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> lowestCommonAncestor(root.right, p, q);<br>    <span class="hljs-type">return</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span>= <span class="hljs-literal">null</span> ? right : right == <span class="hljs-literal">null</span> ? left : root;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>如果左右子树分别有 p 或 q，则当前节点是 p 和 q 的最近公共节点</li></ol></li></ul><h2 id="25-BST6-从有序数组中构造二叉查找树"><a href="#25-BST6-从有序数组中构造二叉查找树" class="headerlink" title="25. BST6 从有序数组中构造二叉查找树"></a>25. BST6 从有序数组中构造二叉查找树</h2><ul><li><p>题目：将有序数据构造成 BST，而且平衡（lc108）</p></li><li><p>思路：</p><ol><li>就不断的从中点构造，时间 O（n），空间 O（logn）</li></ol></li><li><p>题解：</p><ol><li><p>递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">sortedArrayToBST</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-keyword">return</span> toBST(nums, <span class="hljs-number">0</span>, nums.length - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-keyword">private</span> TreeNode <span class="hljs-title function_">toBST</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> sIdx, <span class="hljs-type">int</span> eIdx)</span>&#123;<br>    <span class="hljs-keyword">if</span> (sIdx &gt; eIdx) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">mIdx</span> <span class="hljs-operator">=</span> (sIdx + eIdx) / <span class="hljs-number">2</span>;<br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(nums[mIdx]);<br>    root.left =  toBST(nums, sIdx, mIdx - <span class="hljs-number">1</span>);<br>    root.right = toBST(nums, mIdx + <span class="hljs-number">1</span>, eIdx);<br>    <span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>这种取中点的，边界条件不用判断相等，判断 left &gt; right 就好</li></ol></li></ul><h2 id="26-BST7-根据有序链表构造平衡-BST"><a href="#26-BST7-根据有序链表构造平衡-BST" class="headerlink" title="26. BST7 根据有序链表构造平衡 BST"></a>26. BST7 根据有序链表构造平衡 BST</h2><ul><li><p>题目：将有序链表造成 BST，而且平衡（lc109）</p></li><li><p>思路：</p><ol><li>迭代的找链表中点构造，时间 O（nlogn），空间 O（logn）</li><li>分治加中序遍历优化，由于构造出的树的中序遍历就是链表本身，可以先不填构造出的节点的值，左树搞定以后再将链表访问到的当前元素放到节点值，后移，时间 O（n），空间 O（logn）</li></ol></li><li><p>题解：</p><ol><li><p>递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">sortedListToBST</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-comment">// 迭代的找链表中点构造，时间 O（nlogn），空间 O（n）</span><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (head.next == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(head.val);<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">fast</span> <span class="hljs-operator">=</span> head.next, slow = head;<br>        <span class="hljs-keyword">while</span> (fast.next != <span class="hljs-literal">null</span> &amp;&amp; fast.next.next != <span class="hljs-literal">null</span>) &#123;<br>            fast = fast.next.next;<br>            slow = slow.next;<br>        &#125;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(slow.next.val);<br>        root.right = sortedListToBST(slow.next.next);<br>        slow.next = <span class="hljs-literal">null</span>;<br>        root.left = sortedListToBST(head);<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>递归优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 分治加中序遍历优化，由于构造出的树的中序遍历就是链表本身，可以先不填构造出的节点的值，左树搞定以后再将链表访问到的当前元素放到节点值，后移，时间 O（n），空间 O（logn）</span><br>    ListNode globalHead;<br><br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">sortedListToBST</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        globalHead = head;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> getLength(head);<br>        <span class="hljs-keyword">return</span> buildTree(<span class="hljs-number">0</span>, length - <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getLength</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (head != <span class="hljs-literal">null</span>) &#123;<br>            ++ret;<br>            head = head.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">buildTree</span><span class="hljs-params">(<span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> &#123;<br>        <span class="hljs-keyword">if</span> (left &gt; right) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (left + right + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>();<br>        root.left = buildTree(left, mid - <span class="hljs-number">1</span>);<br>        root.val = globalHead.val;<br>        globalHead = globalHead.next;<br>        root.right = buildTree(mid + <span class="hljs-number">1</span>, right);<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>快慢指针不需要新建一个 dummy 头结点</li><li>难以解决的递归问题别忘记可以调用函数自身完成复杂功能</li><li>BST 特殊性质决定了中序遍历可以直接填递增值</li></ol></li></ul><h2 id="27-BST8-在-BST-中找两个节点使和为一个定值"><a href="#27-BST8-在-BST-中找两个节点使和为一个定值" class="headerlink" title="27. BST8 在 BST 中找两个节点使和为一个定值"></a>27. BST8 在 BST 中找两个节点使和为一个定值</h2><ul><li><p>题目：在 BST 中找两个节点使和为一个定值（lc653）</p></li><li><p>思路：</p><ol><li>中序遍历得到有序列表后用双指针确定，时间 O（n），空间 O（n）</li><li>不用列表保存，用两个指针指向顺序访问到的节点，和逆向访问的节点，时间 O（n），空间 O（n）</li></ol></li><li><p>题解：</p><ol><li><p>中序遍历 + 双指针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 中序遍历得到有序列表后用双指针确定，时间 O（n），空间 O（n）</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">findTarget</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> k)</span> &#123;<br>    List&lt;Integer&gt; nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    inOrder(root, nums);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = nums.size() - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> nums.get(i) + nums.get(j);<br>        <span class="hljs-keyword">if</span> (sum == k) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (sum &lt; k) i++;<br>        <span class="hljs-keyword">else</span> j--;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inOrder</span><span class="hljs-params">(TreeNode root, List&lt;Integer&gt; nums)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br>    inOrder(root.left, nums);<br>    nums.add(root.val);<br>    inOrder(root.right, nums);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>中序遍历优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 不用列表保存，用两个指针指向顺序访问到的节点，和逆向访问的节点，时间 O（n），空间 O（n）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">findTarget</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> root, right = root;<br>        Deque&lt;TreeNode&gt; leftStack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;TreeNode&gt;();<br>        Deque&lt;TreeNode&gt; rightStack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;TreeNode&gt;();<br>        leftStack.push(left);<br>        <span class="hljs-keyword">while</span> (left.left != <span class="hljs-literal">null</span>) &#123;<br>            leftStack.push(left.left);<br>            left = left.left;<br>        &#125;<br>        rightStack.push(right);<br>        <span class="hljs-keyword">while</span> (right.right != <span class="hljs-literal">null</span>) &#123;<br>            rightStack.push(right.right);<br>            right = right.right;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (left != right) &#123;<br>            <span class="hljs-keyword">if</span> (left.val + right.val == k) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (left.val + right.val &lt; k) &#123;<br>                left = getLeft(leftStack);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                right = getRight(rightStack);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">getLeft</span><span class="hljs-params">(Deque&lt;TreeNode&gt; stack)</span> &#123;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> stack.pop();<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> root.right;<br>        <span class="hljs-keyword">while</span> (node != <span class="hljs-literal">null</span>) &#123;<br>            stack.push(node);<br>            node = node.left;<br>        &#125;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">getRight</span><span class="hljs-params">(Deque&lt;TreeNode&gt; stack)</span> &#123;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> stack.pop();<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> root.left;<br>        <span class="hljs-keyword">while</span> (node != <span class="hljs-literal">null</span>) &#123;<br>            stack.push(node);<br>            node = node.right;<br>        &#125;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>由于两个待求的节点可能分别在左右子树中，所以不能简单的用左右子树递归求解</p></li></ul><h2 id="28-BST9-在-BST-中查找两个节点差的最小绝对值"><a href="#28-BST9-在-BST-中查找两个节点差的最小绝对值" class="headerlink" title="28. BST9 在 BST 中查找两个节点差的最小绝对值"></a>28. BST9 在 BST 中查找两个节点差的最小绝对值</h2><ul><li><p>题目：在 BST 中查找两个节点差的最小绝对值（lc530）</p></li><li><p>思路：</p><ol><li>中序遍历过程中计算和上一个值的差，记录最大，时间 O（n），空间 O（logn）</li></ol></li><li><p>题解：</p><ol><li><p>递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 中序遍历过程中计算和上一个值的差，记录最大，时间 O（n），空间 O（logn）</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> Integer.MAX_VALUE;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMinimumDifference</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> min;<br>        getMinimumDifference(root.left);<br>        <span class="hljs-keyword">if</span> (prev != -<span class="hljs-number">1</span>) min = Math.min(min, root.val - prev);<br>        prev = root.val;<br>        getMinimumDifference(root.right);<br>        <span class="hljs-keyword">return</span> min;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>设置 int 最大值可以给赋值 Integer.MAX_VALUE</li><li>Math.abs 取绝对值</li></ol></li></ul><h2 id="29-BST10-寻找BST中出现次数最多的值"><a href="#29-BST10-寻找BST中出现次数最多的值" class="headerlink" title="29. BST10 寻找BST中出现次数最多的值"></a>29. BST10 寻找BST中出现次数最多的值</h2><ul><li><p>题目：寻找BST中出现次数最多的值（lc501）</p></li><li><p>思路：</p><ol><li>中序遍历同时判断是否为众数，时间 O（n），空间 O（logn）</li><li>Morris 中序遍历，时间 O（n），空间 O（1）</li></ol></li><li><p>题解：</p><ol><li><p>遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    List&lt;Integer&gt; answer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>    <span class="hljs-type">int</span> base, count, maxCount;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] findMode(TreeNode root) &#123;<br>        dfs(root);<br>        <span class="hljs-type">int</span>[] mode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[answer.size()];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; answer.size(); ++i) &#123;<br>            mode[i] = answer.get(i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> mode;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(TreeNode o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        dfs(o.left);<br>        update(o.val);<br>        dfs(o.right);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        <span class="hljs-keyword">if</span> (x == base) &#123;<br>            ++count;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            count = <span class="hljs-number">1</span>;<br>            base = x;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (count == maxCount) &#123;<br>            answer.add(base);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (count &gt; maxCount) &#123;<br>            maxCount = count;<br>            answer.clear();<br>            answer.add(base);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Mirros</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-type">int</span> base, count, maxCount;<br>    List&lt;Integer&gt; answer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] findMode(TreeNode root) &#123;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> root, pre = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (cur.left == <span class="hljs-literal">null</span>) &#123;<br>                update(cur.val);<br>                cur = cur.right;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            pre = cur.left;<br>            <span class="hljs-keyword">while</span> (pre.right != <span class="hljs-literal">null</span> &amp;&amp; pre.right != cur) &#123;<br>                pre = pre.right;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (pre.right == <span class="hljs-literal">null</span>) &#123;<br>                pre.right = cur;<br>                cur = cur.left;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                pre.right = <span class="hljs-literal">null</span>;<br>                update(cur.val);<br>                cur = cur.right;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span>[] mode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[answer.size()];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; answer.size(); ++i) &#123;<br>            mode[i] = answer.get(i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> mode;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        <span class="hljs-keyword">if</span> (x == base) &#123;<br>            ++count;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            count = <span class="hljs-number">1</span>;<br>            base = x;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (count == maxCount) &#123;<br>            answer.add(base);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (count &gt; maxCount) &#123;<br>            maxCount = count;<br>            answer.clear();<br>            answer.add(base);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>可以存在多个众数，判断时候就比较麻烦</li><li>Mirros 强啊</li></ol></li></ul><h2 id="30-Trie1-实现一个-Trie"><a href="#30-Trie1-实现一个-Trie" class="headerlink" title="30. Trie1 实现一个 Trie"></a>30. Trie1 实现一个 Trie</h2><ul><li><p>题目：Trie，又称前缀树或字典树，用于判断字符串是否存在或者是否具有某种字符串前缀（lc208）</p></li><li><p>思路：</p><ol><li>内置类 Node，包含属性 childs 为大小为 26 的 Node 数组，记录是否有下一个对应字母的单词，时间 O（n），空间 O（26mn）</li><li>可以把自己当成 Node，时间 O（n），空间 O（26mn）</li></ol></li><li><p>题解：</p><ol><li><p>Trie</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Trie</span> &#123;<br>    <span class="hljs-comment">// 内置类 Node，包含属性 childs 为大小为 26 的 Node 数组，记录是否有下一个对应字母的单词，时间 O（n），空间 O（26mn）</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>        Node[] childs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>[<span class="hljs-number">26</span>];<br>        <span class="hljs-type">boolean</span> isLeaf;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Node</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Trie</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String word)</span> &#123;<br>        insert(word, root);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String word, Node node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">if</span> (word.length() == <span class="hljs-number">0</span>) &#123;<br>            node.isLeaf = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> indexForChar(word.charAt(<span class="hljs-number">0</span>));<br>        <span class="hljs-keyword">if</span> (node.childs[index] == <span class="hljs-literal">null</span>) &#123;<br>            node.childs[index] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();<br>        &#125;<br>        insert(word.substring(<span class="hljs-number">1</span>), node.childs[index]);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">search</span><span class="hljs-params">(String word)</span> &#123;<br>        <span class="hljs-keyword">return</span> search(word, root);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">search</span><span class="hljs-params">(String word, Node node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> (word.length() == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> node.isLeaf;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> indexForChar(word.charAt(<span class="hljs-number">0</span>));<br>        <span class="hljs-keyword">return</span> search(word.substring(<span class="hljs-number">1</span>), node.childs[index]);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">startsWith</span><span class="hljs-params">(String prefix)</span> &#123;<br>        <span class="hljs-keyword">return</span> startWith(prefix, root);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">startWith</span><span class="hljs-params">(String prefix, Node node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> (prefix.length() == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> indexForChar(prefix.charAt(<span class="hljs-number">0</span>));<br>        <span class="hljs-keyword">return</span> startWith(prefix.substring(<span class="hljs-number">1</span>), node.childs[index]);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">indexForChar</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span> &#123;<br>        <span class="hljs-keyword">return</span> c - <span class="hljs-string">&#x27;a&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Trie 优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Trie</span> &#123;<br>    <span class="hljs-comment">// 可以把自己当成 Node，时间 O（n），空间 O（26mn）</span><br>    <span class="hljs-keyword">private</span> Trie[] children;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isEnd;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Trie</span><span class="hljs-params">()</span> &#123;<br>        children = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Trie</span>[<span class="hljs-number">26</span>];<br>        isEnd = <span class="hljs-literal">false</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String word)</span> &#123;<br>        <span class="hljs-type">Trie</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; word.length(); i++) &#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> word.charAt(i);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> ch - <span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-keyword">if</span> (node.children[index] == <span class="hljs-literal">null</span>) &#123;<br>                node.children[index] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Trie</span>();<br>            &#125;<br>            node = node.children[index];<br>        &#125;<br>        node.isEnd = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">search</span><span class="hljs-params">(String word)</span> &#123;<br>        <span class="hljs-type">Trie</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> searchPrefix(word);<br>        <span class="hljs-keyword">return</span> node != <span class="hljs-literal">null</span> &amp;&amp; node.isEnd;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">startsWith</span><span class="hljs-params">(String prefix)</span> &#123;<br>        <span class="hljs-keyword">return</span> searchPrefix(prefix) != <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Trie <span class="hljs-title function_">searchPrefix</span><span class="hljs-params">(String prefix)</span> &#123;<br>        <span class="hljs-type">Trie</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; prefix.length(); i++) &#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> prefix.charAt(i);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> ch - <span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-keyword">if</span> (node.children[index] == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            node = node.children[index];<br>        &#125;<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>用下一个节点的属性记录当前节点是否为单词最后一个字符</li><li>用类本身作为 Node</li></ol></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E6%A0%91.md">CS-Notes&#x2F;Leetcode 题解 - 树.md at master · CyC2018&#x2F;CS-Notes (github.com)</a></li><li><a href="https://leetcode.cn/problemset/all/?topicSlugs=tree&page=1&sorting=W3t9XQ==">题库 - 力扣 (LeetCode) 全球极客挚爱的技术成长平台</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>专项算法题目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>data structure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法专项精选题 - 树（二）</title>
    <link href="/2022/06/21/%E7%AE%97%E6%B3%95/%E4%B8%93%E9%A1%B9%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/algorithm4/"/>
    <url>/2022/06/21/%E7%AE%97%E6%B3%95/%E4%B8%93%E9%A1%B9%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/algorithm4/</url>
    
    <content type="html"><![CDATA[<h1 id="树（二）"><a href="#树（二）" class="headerlink" title="树（二）"></a>树（二）</h1><h2 id="11-递归11-统计左叶子节点的和"><a href="#11-递归11-统计左叶子节点的和" class="headerlink" title="11. 递归11 统计左叶子节点的和"></a>11. 递归11 统计左叶子节点的和</h2><ul><li><p>题目：计算二叉树所有左叶子和（lc404）</p></li><li><p>思路：</p><ol><li>递归，DFS，时间 O（n），空间 O（n）</li></ol></li><li><p>题解：</p><ol><li><p>DFS 递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//递归，DFS，时间 O（n），空间 O（n）</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sumOfLeftLeaves</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (isLeaf(root.left)) <span class="hljs-keyword">return</span> root.left.val + sumOfLeftLeaves(root.right);<br>    <span class="hljs-keyword">return</span> sumOfLeftLeaves(root.left) + sumOfLeftLeaves(root.right);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isLeaf</span><span class="hljs-params">(TreeNode node)</span>&#123;<br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> node.left == <span class="hljs-literal">null</span> &amp;&amp; node.right == <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>不能判断当前节点是否为左节点，所以判断左节点是否为叶子</li></ol></li></ul><h2 id="12-递归12-相同节点值的最大路径长度"><a href="#12-递归12-相同节点值的最大路径长度" class="headerlink" title="12. 递归12 相同节点值的最大路径长度"></a>12. 递归12 相同节点值的最大路径长度</h2><ul><li><p>题目：寻找一棵树里最长的相同节点组成的路径（lc687）</p></li><li><p>思路：</p><ol><li>当前节点左右最长同点路径和，和左子树最长的同点路径，和右子树最长同点路径，比较取最大值返回，时间 O（n^2），空间 O（n）</li><li>在一个每次返回最长同点路径的后序遍历 DFS 代码中，记录遇到的最长同点路径，时间 O（n），空间 O（n）</li></ol></li><li><p>题解：</p><ol><li><p>dfs</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 当前节点左右最长同点路径和，和左子树最长的同点路径，和右子树最长同点路径，比较取最大值返回，时间 O（n^2），空间 O（n）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">longestUnivaluePath</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> Math.max(longestPath(root.left, root.val) + longestPath(root.right, root.val), Math.max(longestUnivaluePath(root.left), longestUnivaluePath(root.right)));<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">longestPath</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span> || root.val != val) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> Math.max(longestPath(root.left, val), longestPath(root.right, val)) + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>dfs 优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 在一个每次返回最长同点路径的后序遍历 DFS 代码中，记录遇到的最长同点路径，时间 O（n），空间 O（n）</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">longestUnivaluePath</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    dfs(root);<br>    <span class="hljs-keyword">return</span> path;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(TreeNode root)</span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> dfs(root.left);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> dfs(root.right);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">leftPath</span> <span class="hljs-operator">=</span> root.left != <span class="hljs-literal">null</span> &amp;&amp; root.left.val == root.val ? left + <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">rightPath</span> <span class="hljs-operator">=</span> root.right != <span class="hljs-literal">null</span> &amp;&amp; root.right.val == root.val ? right + <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>    path = Math.max(path, leftPath + rightPath);<br>    <span class="hljs-keyword">return</span> Math.max(leftPath, rightPath);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>要努力想出一次遍历的空间为 O（n）的解法，想办法在求深度的代码中改良</li><li>求最大值，可以每次返回的都是局部最大的计算参数，在当前节点的访问中完成局部最大的计算，对比记录最大值</li></ol></li></ul><h2 id="13-递归13-间隔遍历"><a href="#13-递归13-间隔遍历" class="headerlink" title="13. 递归13 间隔遍历"></a>13. 递归13 间隔遍历</h2><ul><li><p>题目：不可以连续访问节点，求访问和最大值（lc337）</p></li><li><p>思路：</p><ol><li>动态规划，用两个 HashMap 记录一个节点 rob 和不 rob 的子树最大和，f 表示选择，g不选择，时间 O（n），空间 O（n）</li><li>由于动态规划过程中每个节点只关心孩子节点的 f 和 g 值，可以优化，时间 O（n），空间 O（n）</li><li>简单递归会超出时间复杂度，用 Map 记录已计算过的点，只记录 rob 某点情况下子树最大值，时间 O（n），空间 O（n）</li></ol></li><li><p>题解：</p><ol><li><p>动态规划</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 动态规划，用两个 HashMap 记录一个节点 rob 和不 rob 的子树最大和，f 表示选择，g不选择，时间 O（n），空间 O（n）</span><br>    Map&lt;TreeNode, Integer&gt; f = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;TreeNode, Integer&gt;();<br>    Map&lt;TreeNode, Integer&gt; g = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;TreeNode, Integer&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">rob</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        dfs(root);<br>        <span class="hljs-keyword">return</span> Math.max(f.getOrDefault(root, <span class="hljs-number">0</span>), g.getOrDefault(root, <span class="hljs-number">0</span>));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(TreeNode node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        dfs(node.left);<br>        dfs(node.right);<br>        f.put(node, node.val + g.getOrDefault(node.left, <span class="hljs-number">0</span>) + g.getOrDefault(node.right, <span class="hljs-number">0</span>));<br>        g.put(node, Math.max(f.getOrDefault(node.left, <span class="hljs-number">0</span>), g.getOrDefault(node.left, <span class="hljs-number">0</span>)) + Math.max(f.getOrDefault(node.right, <span class="hljs-number">0</span>), g.getOrDefault(node.right, <span class="hljs-number">0</span>)));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>动态规划 优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 由于动态规划过程中每个节点只关心孩子节点的 f 和 g 值，可以优化，时间 O（n），空间 O（n）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">rob</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-type">int</span>[] rootStatus = dfs(root);<br>        <span class="hljs-keyword">return</span> Math.max(rootStatus[<span class="hljs-number">0</span>], rootStatus[<span class="hljs-number">1</span>]);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] dfs(TreeNode node) &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>        &#125;<br>        <span class="hljs-type">int</span>[] l = dfs(node.left);<br>        <span class="hljs-type">int</span>[] r = dfs(node.right);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">selected</span> <span class="hljs-operator">=</span> node.val + l[<span class="hljs-number">1</span>] + r[<span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">notSelected</span> <span class="hljs-operator">=</span> Math.max(l[<span class="hljs-number">0</span>], l[<span class="hljs-number">1</span>]) + Math.max(r[<span class="hljs-number">0</span>], r[<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;selected, notSelected&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>动态规划另一种写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 简单递归会超出时间复杂度，用 Map 记录已计算过的点，只记录 rob 某点情况下子树最大值，时间 O（n），空间 O（n）</span><br>Map&lt;TreeNode, Integer&gt; cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(); <br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">rob</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (cache.containsKey(root)) <span class="hljs-keyword">return</span> cache.get(root);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">val1</span> <span class="hljs-operator">=</span> root.val;<br>    <span class="hljs-keyword">if</span> (root.left != <span class="hljs-literal">null</span>) val1 += rob(root.left.left) + rob(root.left.right);<br>    <span class="hljs-keyword">if</span> (root.right != <span class="hljs-literal">null</span>) val1 += rob(root.right.left) + rob(root.right.right);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">val2</span> <span class="hljs-operator">=</span> rob(root.left) + rob(root.right);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> Math.max(val1, val2);<br>    cache.put(root, res);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ul><h2 id="14-递归14-找出二叉树中第二小的节点"><a href="#14-递归14-找出二叉树中第二小的节点" class="headerlink" title="14. 递归14 找出二叉树中第二小的节点"></a>14. 递归14 找出二叉树中第二小的节点</h2><ul><li><p>题目：一个二叉树每个节点为子节点中小的，求二叉树中第二小节点（lc671）</p></li><li><p>思路：</p><ol><li>DFS递归，找大于根节点的最小值，时间 O（n），空间 O（n）</li><li>DFS递归，左右节点分别找第一个大于根节点的值，比较后 return，没有满足情况的值返回 -1，时间 O（n），空间 O（n）</li></ol></li><li><p>题解：</p><ol><li><p>dfs1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// DFS递归，找大于根节点的最小值，时间 O（n），空间 O（n）</span><br>    <span class="hljs-type">int</span> ans;<br>    <span class="hljs-type">int</span> rootvalue;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findSecondMinimumValue</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        ans = -<span class="hljs-number">1</span>;<br>        rootvalue = root.val;<br>        dfs(root);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(TreeNode node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (ans != -<span class="hljs-number">1</span> &amp;&amp; node.val &gt;= ans) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (node.val &gt; rootvalue) &#123;<br>            ans = node.val;<br>        &#125;<br>        dfs(node.left);<br>        dfs(node.right);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>dfs2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findSecondMinimumValue</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-comment">// DFS递归，左右节点分别找第一个大于根节点的值，比较后 return，没有满足情况的值返回 -1，时间 O（n），空间 O（n）</span><br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (root.left == <span class="hljs-literal">null</span> &amp;&amp; root.right == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">leftVal</span> <span class="hljs-operator">=</span> root.left.val;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">rightVal</span> <span class="hljs-operator">=</span> root.right.val;<br>    <span class="hljs-keyword">if</span> (leftVal == root.val) leftVal = findSecondMinimumValue(root.left);<br>    <span class="hljs-keyword">if</span> (rightVal == root.val) rightVal = findSecondMinimumValue(root.right);<br>    <span class="hljs-keyword">if</span> (leftVal != -<span class="hljs-number">1</span> &amp;&amp; rightVal != -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> Math.min(leftVal, rightVal);<br>    <span class="hljs-keyword">if</span> (leftVal != -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> leftVal;<br>    <span class="hljs-keyword">return</span> rightVal;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>递归代码复杂的话可以先不要想着写出最简洁的代码，完成功能后再简化，比如合并 if 分支</li></ol></li></ul><h2 id="15-层次遍历1-一棵树每层节点的平均数"><a href="#15-层次遍历1-一棵树每层节点的平均数" class="headerlink" title="15. 层次遍历1 一棵树每层节点的平均数"></a>15. 层次遍历1 一棵树每层节点的平均数</h2><ul><li><p>题目：得到一颗二叉树每层节点平均数（lc637）</p></li><li><p>思路：</p><ol><li>层次遍历，不过每次记录队列 size，将 size 个节点处理完再进行下一次迭代，时间 O（n），空间 O（n）</li><li>DFS，维护一个counts存储每层节点数，sums存储节点值和，时间 O（n），空间 O（n）</li></ol></li><li><p>解题：</p><ol><li><p>层次遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Double&gt; <span class="hljs-title function_">averageOfLevels</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-comment">// 层次遍历，不过每次记录队列 size，将 size 个节点处理完再进行下一次迭代，时间 O（n），空间 O（n）</span><br>    List&lt;Double&gt; ret = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> ret;<br>    Queue&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    queue.add(root);<br>    <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">cnt</span> <span class="hljs-operator">=</span> queue.size();<br>        <span class="hljs-type">double</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; cnt; i++) &#123;<br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> queue.poll();<br>            sum += node.val;<br>            <span class="hljs-keyword">if</span> (node.left != <span class="hljs-literal">null</span>) queue.add(node.left);<br>            <span class="hljs-keyword">if</span> (node.right != <span class="hljs-literal">null</span>) queue.add(node.right);<br>        &#125;<br>        ret.add(sum / cnt);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>dfs</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// DFS，维护一个counts存储每层节点数，sums存储节点值和，时间 O（n），空间 O（n）</span><br>    <span class="hljs-keyword">public</span> List&lt;Double&gt; <span class="hljs-title function_">averageOfLevels</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        List&lt;Integer&gt; counts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>        List&lt;Double&gt; sums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Double&gt;();<br>        dfs(root, <span class="hljs-number">0</span>, counts, sums);<br>        List&lt;Double&gt; averages = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Double&gt;();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> sums.size();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            averages.add(sums.get(i) / counts.get(i));<br>        &#125;<br>        <span class="hljs-keyword">return</span> averages;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> level, List&lt;Integer&gt; counts, List&lt;Double&gt; sums)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (level &lt; sums.size()) &#123;<br>            sums.set(level, sums.get(level) + root.val);<br>            counts.set(level, counts.get(level) + <span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            sums.add(<span class="hljs-number">1.0</span> * root.val);<br>            counts.add(<span class="hljs-number">1</span>);<br>        &#125;<br>        dfs(root.left, level + <span class="hljs-number">1</span>, counts, sums);<br>        dfs(root.right, level + <span class="hljs-number">1</span>, counts, sums);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>我一开始的思路是用两个队列，奇偶队列交替使用，每次某个队列为空就代表开始新的一层遍历</li><li>这个使用一个队列直接记录队列 size 然后处理 size 个后算一次 sum 显然更简洁，作为模板记一下</li></ol></li></ul><h2 id="16-层次遍历2-得到左下角的节点"><a href="#16-层次遍历2-得到左下角的节点" class="headerlink" title="16. 层次遍历2 得到左下角的节点"></a>16. 层次遍历2 得到左下角的节点</h2><ul><li><p>题目：得到二叉树最下层最左节点（lc513）</p></li><li><p>思路：</p><ol><li>用层次遍历，每到一层记录一下第一个节点，时间 O（n），空间 O（n）</li><li>用层次遍历，先右后左，最后一个访问节点就是目标节点，时间 O（n），空间 O（n）</li></ol></li><li><p>题解：</p><ol><li><p>层次遍历 1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findBottomLeftValue</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-comment">// 用层次遍历，每到一层记录一下第一个节点，时间 O（n），空间 O（n）</span><br>        Queue&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;TreeNode&gt;();<br>        queue.offer(root);<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> root;<br>        <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> queue.size();<br>            res = queue.peek();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>                <span class="hljs-type">TreeNode</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> queue.poll();<br>                <span class="hljs-keyword">if</span> (tmp.left != <span class="hljs-literal">null</span>) queue.offer(tmp.left);<br>                <span class="hljs-keyword">if</span> (tmp.right != <span class="hljs-literal">null</span>) queue.offer(tmp.right);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res.val;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>层次遍历 2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findBottomLeftValue</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-comment">// 用层次遍历，先右后左，最后一个访问节点就是目标节点，时间 O（n），空间 O（n）</span><br>    Queue&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    queue.add(root);<br>    <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>        root = queue.poll();<br>        <span class="hljs-keyword">if</span> (root.right != <span class="hljs-literal">null</span>) queue.add(root.right);<br>        <span class="hljs-keyword">if</span> (root.left != <span class="hljs-literal">null</span>) queue.add(root.left);<br>    &#125;<br>    <span class="hljs-keyword">return</span> root.val;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>层次遍历每层操作是个模板，留意一下</li><li>思维要活一点，遍历的本质是访问顺序，不是只有 DFS、BFS 的模板一样，先左后右，可以根据题目魔改，有意外惊喜</li></ol></li></ul><h2 id="17-非递归1-二叉树前序遍历"><a href="#17-非递归1-二叉树前序遍历" class="headerlink" title="17. 非递归1 二叉树前序遍历"></a>17. 非递归1 二叉树前序遍历</h2><ul><li><p>题目：非递归，迭代完成二叉树的前序遍历（lc144）</p></li><li><p>思路：</p><ol><li>需要一个栈来存储待访问的节点，前序遍历，先访问当前节点，右孩子压栈，左孩子压栈，迭代，时间 O（n），空间 O（n）</li><li>Morris 遍历，利用空指针记录跳回的位置，第一次先找到跳回的上一个点，右指针设置当前，然后访问当前节点后访问左子树，当跳回时候，找到跳回的上一个点，右指针设置为 null，访问右子树，时间 O（n），空间 O（1）</li></ol></li><li><p>题解：</p><ol><li><p>栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">preorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-comment">// 需要一个栈来存储待访问的节点，前序遍历，先访问当前节点，右孩子压栈，左孩子压栈，迭代，时间 O（n），空间 O（n）</span><br>    List&lt;Integer&gt; ret = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    Stack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    stack.push(root);<br>    <span class="hljs-keyword">while</span> (!stack.isEmpty()) &#123;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> stack.pop();<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) <span class="hljs-keyword">continue</span>;<br>        ret.add(node.val);<br>        stack.push(node.right);  <span class="hljs-comment">// 先右后左，保证左子树先遍历</span><br>        stack.push(node.left);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Morris</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">preorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-comment">// Morris 遍历，利用空指针记录跳回的位置，第一次先找到跳回的上一个点，右指针设置当前，然后访问当前节点后访问左子树，当跳回时候，找到跳回的上一个点，右指针设置为 null，访问右子树，时间 O（n），空间 O（1）</span><br>        List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> root, p2 = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span> (p1 != <span class="hljs-literal">null</span>) &#123;<br>            p2 = p1.left;<br>            <span class="hljs-keyword">if</span> (p2 != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">while</span> (p2.right != <span class="hljs-literal">null</span> &amp;&amp; p2.right != p1) &#123;<br>                    p2 = p2.right;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (p2.right == <span class="hljs-literal">null</span>) &#123;<br>                    res.add(p1.val);<br>                    p2.right = p1;<br>                    p1 = p1.left;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    p2.right = <span class="hljs-literal">null</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                res.add(p1.val);<br>            &#125;<br>            p1 = p1.right;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结</p><ol><li>普通的迭代就记着用栈，每次右边压栈就可以</li><li>Morris 方法真牛，多复习，争取记住</li></ol></li></ul><h2 id="18-非递归2-二叉树中序遍历"><a href="#18-非递归2-二叉树中序遍历" class="headerlink" title="18. 非递归2 二叉树中序遍历"></a>18. 非递归2 二叉树中序遍历</h2><ul><li><p>题目：非递归，迭代完成二叉树的中序遍历（lc94）</p></li><li><p>思路：</p><ol><li>需要一个栈来存储待访问的节点，中序遍历，时间 O（n），空间 O（n）</li><li>mirros，时间 O（n），空间 O（1）</li></ol></li><li><p>题解：</p><ol><li><p>栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">inorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-comment">// 需要一个栈来存储待访问的节点，中序遍历，时间 O（n），空间 O（n）</span><br>    List&lt;Integer&gt; ret = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> ret;<br>    Stack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> root;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span> || !stack.isEmpty()) &#123;<br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>) &#123;<br>            stack.push(cur);<br>            cur = cur.left;<br>        &#125;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> stack.pop();<br>        ret.add(node.val);<br>        cur = node.right;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Mirros</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">inorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">predecessor</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">while</span> (root != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (root.left != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// predecessor 节点就是当前 root 节点向左走一步，然后一直向右走至无法走为止</span><br>                predecessor = root.left;<br>                <span class="hljs-keyword">while</span> (predecessor.right != <span class="hljs-literal">null</span> &amp;&amp; predecessor.right != root) &#123;<br>                    predecessor = predecessor.right;<br>                &#125;<br>                <br>                <span class="hljs-comment">// 让 predecessor 的右指针指向 root，继续遍历左子树</span><br>                <span class="hljs-keyword">if</span> (predecessor.right == <span class="hljs-literal">null</span>) &#123;<br>                    predecessor.right = root;<br>                    root = root.left;<br>                &#125;<br>                <span class="hljs-comment">// 说明左子树已经访问完了，我们需要断开链接</span><br>                <span class="hljs-keyword">else</span> &#123;<br>                    res.add(root.val);<br>                    predecessor.right = <span class="hljs-literal">null</span>;<br>                    root = root.right;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 如果没有左孩子，则直接访问右孩子</span><br>            <span class="hljs-keyword">else</span> &#123;<br>                res.add(root.val);<br>                root = root.right;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>中序遍历的迭代就是不断地找左孩子，访问，curr &#x3D; curr.right，pop出上一个待访问的点</li><li>mirros 牛</li></ol></li></ul><h2 id="19-非递归3-二叉树后序遍历"><a href="#19-非递归3-二叉树后序遍历" class="headerlink" title="19. 非递归3 二叉树后序遍历"></a>19. 非递归3 二叉树后序遍历</h2><ul><li><p>题目：非递归，迭代完成二叉树的后序遍历（lc145）</p></li><li><p>思路：</p><ol><li>需要一个栈来存储待访问的节点，后序遍历，增加一个指向上次访问节点的指针，每次访问当前节点先判断，上次访问节点是否指向自己的右孩子，注意 while 的判断这时候是 root !&#x3D; null || !stack.isEmpty()，访问当前节点后需要设置 root &#x3D; null（为了下次循环不重新遍历左边的节点），时间 O（n），空间 O（n）</li><li>前序遍历变体，前序遍历为 root -&gt; left -&gt; right，后序遍历为 left -&gt; right -&gt; root。可以修改前序遍历成为 root -&gt; right -&gt; left，那么这个顺序就和后序遍历正好相反，时间 O（n），空间 O（n）</li><li>morris 遍历，时间 O（n），空间 O（1）</li></ol></li><li><p>题解：</p><ol><li><p>栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">postorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-comment">// 需要一个栈来存储待访问的节点，后序遍历，增加一个指向上次访问节点的指针，每次访问当前节点先判断，上次访问节点是否指向自己的右孩子，注意 while 的判断这时候是 root != null || !stack.isEmpty()，访问当前节点后需要设置 root = null（为了下次循环不重新遍历左边的节点），时间 O（n），空间 O（n）</span><br>        List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br><br>        Deque&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;TreeNode&gt;();<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span> (root != <span class="hljs-literal">null</span> || !stack.isEmpty()) &#123;<br>            <span class="hljs-keyword">while</span> (root != <span class="hljs-literal">null</span>) &#123;<br>                stack.push(root);<br>                root = root.left;<br>            &#125;<br>            root = stack.pop();<br>            <span class="hljs-keyword">if</span> (root.right == <span class="hljs-literal">null</span> || root.right == prev) &#123;<br>                res.add(root.val);<br>                prev = root;<br>                root = <span class="hljs-literal">null</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                stack.push(root);<br>                root = root.right;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>前序遍历变体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">postorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-comment">// 前序遍历变体，前序遍历为 root -&gt; left -&gt; right，后序遍历为 left -&gt; right -&gt; root。可以修改前序遍历成为 root -&gt; right -&gt; left，那么这个顺序就和后序遍历正好相反，时间 O（n），空间 O（n）</span><br>    List&lt;Integer&gt; ret = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    Stack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    stack.push(root);<br>    <span class="hljs-keyword">while</span> (!stack.isEmpty()) &#123;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> stack.pop();<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) <span class="hljs-keyword">continue</span>;<br>        ret.add(node.val);<br>        stack.push(node.left);<br>        stack.push(node.right);<br>    &#125;<br>    Collections.reverse(ret);<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Mirros</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">postorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br><br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> root, p2 = <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">while</span> (p1 != <span class="hljs-literal">null</span>) &#123;<br>            p2 = p1.left;<br>            <span class="hljs-keyword">if</span> (p2 != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">while</span> (p2.right != <span class="hljs-literal">null</span> &amp;&amp; p2.right != p1) &#123;<br>                    p2 = p2.right;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (p2.right == <span class="hljs-literal">null</span>) &#123;<br>                    p2.right = p1;<br>                    p1 = p1.left;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    p2.right = <span class="hljs-literal">null</span>;<br>                    addPath(res, p1.left);<br>                &#125;<br>            &#125;<br>            p1 = p1.right;<br>        &#125;<br>        addPath(res, root);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addPath</span><span class="hljs-params">(List&lt;Integer&gt; res, TreeNode node)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (node != <span class="hljs-literal">null</span>) &#123;<br>            ++count;<br>            res.add(node.val);<br>            node = node.right;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> res.size() - count, right = res.size() - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> res.get(left);<br>            res.set(left, res.get(right));<br>            res.set(right, temp);<br>            left++;<br>            right--;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>遍历的本质是访问次序，如果正着顺序访问很难搞，可以逆着顺序访问然后把结果逆序</li><li>后序遍历的迭代写法比先序遍历的迭代写法难得多，要多理解多看几次</li><li>morris 牛逼</li></ol></li></ul><h2 id="20-BST1-修剪二叉查找树"><a href="#20-BST1-修剪二叉查找树" class="headerlink" title="20. BST1 修剪二叉查找树"></a>20. BST1 修剪二叉查找树</h2><ul><li><p>题目：修剪 BST 使所有节点在某区间内并依然是 BST（lc669）</p></li><li><p>思路：</p><ol><li>递归，时间 O（n），空间 O（n）</li></ol></li><li><p>题解：</p><ol><li><p>dfs</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">trimBST</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> R)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (root.val &gt; R) <span class="hljs-keyword">return</span> trimBST(root.left, L, R);<br>    <span class="hljs-keyword">if</span> (root.val &lt; L) <span class="hljs-keyword">return</span> trimBST(root.right, L, R);<br>    root.left = trimBST(root.left, L, R);<br>    root.right = trimBST(root.right, L, R);<br>    <span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>当 root &lt; L 时 root.left 直接丢弃，反之亦然</li></ol></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E6%A0%91.md">CS-Notes&#x2F;Leetcode 题解 - 树.md at master · CyC2018&#x2F;CS-Notes (github.com)</a></li><li><a href="https://leetcode.cn/problemset/all/?topicSlugs=tree&page=1&sorting=W3t9XQ==">题库 - 力扣 (LeetCode) 全球极客挚爱的技术成长平台</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>专项算法题目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>data structure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法专项精选题 - 树（一）</title>
    <link href="/2022/06/16/%E7%AE%97%E6%B3%95/%E4%B8%93%E9%A1%B9%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/algorithm3/"/>
    <url>/2022/06/16/%E7%AE%97%E6%B3%95/%E4%B8%93%E9%A1%B9%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/algorithm3/</url>
    
    <content type="html"><![CDATA[<h1 id="树（一）"><a href="#树（一）" class="headerlink" title="树（一）"></a>树（一）</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul><li>题目分类：<ol><li>递归</li><li>层次遍历</li><li>非递归遍历</li><li>BST</li><li>Trie</li></ol></li></ul><h2 id="1-递归1-树的高度"><a href="#1-递归1-树的高度" class="headerlink" title="1. 递归1 树的高度"></a>1. 递归1 树的高度</h2><ul><li><p>题目：返回二叉树高度（lc104）</p></li><li><p>思路：</p><ol><li>递归求深度，叶子节点深度为1，null节点深度为0，时间 O（n），空间 O（n）</li></ol></li><li><p>题解：</p><ol><li><p>递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxDepth</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-comment">// 递归求深度，叶子节点深度为1，null节点深度为0，时间 O（n），空间 O（n）</span><br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> Math.max(maxDepth(root.left), maxDepth(root.right)) + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>递归先从边界入手，思考边界处理后，上一层如何 return，代码就写出来了</li></ol></li></ul><h2 id="2-递归2-平衡树"><a href="#2-递归2-平衡树" class="headerlink" title="2. 递归2 平衡树"></a>2. 递归2 平衡树</h2><ul><li><p>题目：判断二叉树是否为平衡二叉树</p></li><li><p>思路：</p><ol><li>递归求节点深度，追加判断当前节点是否平衡，时间 O（n），空间 O（n）</li><li>一种不写其他函数辅助的方法，不推荐，时间 O（n），空间 O（n）</li></ol></li><li><p>题解：</p><ol><li><p>递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 递归求节点深度，追加判断当前节点是否平衡，时间 O（n），空间 O（n）</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isBalanced</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    maxDepth(root);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxDepth</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> maxDepth(root.left);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> maxDepth(root.right);<br>    <span class="hljs-keyword">if</span> (Math.abs(l - r) &gt; <span class="hljs-number">1</span>) result = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + Math.max(l, r);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>原地递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 一种不写其他函数辅助的方法，不推荐，时间 O（n），空间 O（n）</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> depth;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isBalanced</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            depth = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">leftIsBalanced</span> <span class="hljs-operator">=</span> isBalanced(root.left);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">leftDepth</span> <span class="hljs-operator">=</span> depth;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">rightIsBalanced</span> <span class="hljs-operator">=</span> isBalanced(root.right);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rightDepth</span> <span class="hljs-operator">=</span> depth;<br>        depth = Math.max(leftDepth, rightDepth) + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (!(leftIsBalanced &amp;&amp; rightIsBalanced)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> leftDepth - rightDepth &lt;= <span class="hljs-number">1</span> &amp;&amp; leftDepth - rightDepth &gt;= -<span class="hljs-number">1</span> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>学习使用 Math.abs(l - r) &gt; 1 来判断两数差</li><li>求树深度是模板，留意</li></ol></li></ul><h2 id="3-递归3-两节点的最长路径"><a href="#3-递归3-两节点的最长路径" class="headerlink" title="3. 递归3 两节点的最长路径"></a>3. 递归3 两节点的最长路径</h2><ul><li><p>题目：求二叉树中存在的两节点间的最长路径（lc543）</p></li><li><p>思路：</p><ol><li>递归求节点深度，每个节点求自己的左右节点深度和，记录这个和的最大值，递归结束返回最大值，时间 O（n），空间 O（n）</li></ol></li><li><p>题解：</p><ol><li><p>递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 递归求节点深度，每个节点求自己的左右节点深度和，记录这个和的最大值，递归结束返回最大值，时间 O（n），空间 O（n）</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">diameterOfBinaryTree</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    depth(root);<br>    <span class="hljs-keyword">return</span> max;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">depth</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">leftDepth</span> <span class="hljs-operator">=</span> depth(root.left);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">rightDepth</span> <span class="hljs-operator">=</span> depth(root.right);<br>    max = Math.max(max, leftDepth + rightDepth);<br>    <span class="hljs-keyword">return</span> Math.max(leftDepth, rightDepth) + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>二叉树的直径可能不经过根节点哦</li></ol></li></ul><h2 id="4-递归4-翻转树"><a href="#4-递归4-翻转树" class="headerlink" title="4. 递归4 翻转树"></a>4. 递归4 翻转树</h2><ul><li><p>题目：将二叉树每个节点左右反转（lc226）</p></li><li><p>思路：</p><ol><li>递归反转，时间 O（n），空间 O（n）</li></ol></li><li><p>题解：</p><ol><li><p>递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">invertTree</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-comment">// 递归反转，时间 O（n），空间 O（n）</span><br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> root.left;  <span class="hljs-comment">// 后面的操作会改变 left 指针，因此先保存下来</span><br>    root.left = invertTree(root.right);<br>    root.right = invertTree(left);<br>    <span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>挺简单的，没啥好小结的</li></ol></li></ul><h2 id="5-递归5-归并两棵树"><a href="#5-递归5-归并两棵树" class="headerlink" title="5. 递归5 归并两棵树"></a>5. 递归5 归并两棵树</h2><ul><li><p>题目：两棵树合并，节点值相加，无节点当 0（lc617）</p></li><li><p>思路：</p><ol><li>DFS 递归，时间 O（n），空间 O（n）</li><li>BFS迭代，时间 O（n），空间 O（n）</li></ol></li><li><p>题解：</p><ol><li><p>DFS</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">mergeTrees</span><span class="hljs-params">(TreeNode t1, TreeNode t2)</span> &#123;<br>    <span class="hljs-comment">// DFS 递归，时间 O（n），空间 O（n）</span><br>    <span class="hljs-keyword">if</span> (t1 == <span class="hljs-literal">null</span> &amp;&amp; t2 == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (t1 == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> t2;<br>    <span class="hljs-keyword">if</span> (t2 == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> t1;<br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(t1.val + t2.val);<br>    root.left = mergeTrees(t1.left, t2.left);<br>    root.right = mergeTrees(t1.right, t2.right);<br>    <span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>BFS</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">mergeTrees</span><span class="hljs-params">(TreeNode t1, TreeNode t2)</span> &#123;<br>        <span class="hljs-comment">// BFS迭代，时间 O（n），空间 O（n）</span><br>        <span class="hljs-keyword">if</span> (t1 == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> t2;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (t2 == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> t1;<br>        &#125;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">merged</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(t1.val + t2.val);<br>        Queue&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;TreeNode&gt;();<br>        Queue&lt;TreeNode&gt; queue1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;TreeNode&gt;();<br>        Queue&lt;TreeNode&gt; queue2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;TreeNode&gt;();<br>        queue.offer(merged);<br>        queue1.offer(t1);<br>        queue2.offer(t2);<br>        <span class="hljs-keyword">while</span> (!queue1.isEmpty() &amp;&amp; !queue2.isEmpty()) &#123;<br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> queue.poll(), node1 = queue1.poll(), node2 = queue2.poll();<br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">left1</span> <span class="hljs-operator">=</span> node1.left, left2 = node2.left, right1 = node1.right, right2 = node2.right;<br>            <span class="hljs-keyword">if</span> (left1 != <span class="hljs-literal">null</span> || left2 != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (left1 != <span class="hljs-literal">null</span> &amp;&amp; left2 != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(left1.val + left2.val);<br>                    node.left = left;<br>                    queue.offer(left);<br>                    queue1.offer(left1);<br>                    queue2.offer(left2);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (left1 != <span class="hljs-literal">null</span>) &#123;<br>                    node.left = left1;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (left2 != <span class="hljs-literal">null</span>) &#123;<br>                    node.left = left2;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (right1 != <span class="hljs-literal">null</span> || right2 != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (right1 != <span class="hljs-literal">null</span> &amp;&amp; right2 != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(right1.val + right2.val);<br>                    node.right = right;<br>                    queue.offer(right);<br>                    queue1.offer(right1);<br>                    queue2.offer(right2);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (right1 != <span class="hljs-literal">null</span>) &#123;<br>                    node.right = right1;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    node.right = right2;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> merged;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>注意判断能否改变输入</li><li>层次遍历很麻烦，但是可以参考</li></ol></li></ul><h2 id="6-递归6-判断路径和是否等于一个数"><a href="#6-递归6-判断路径和是否等于一个数" class="headerlink" title="6. 递归6 判断路径和是否等于一个数"></a>6. 递归6 判断路径和是否等于一个数</h2><ul><li><p>题目：根到叶子节点的值的和是否等于一个数（lc112）</p></li><li><p>思路：</p><ol><li>BFS，需要多一个队列记录当前节点的路径和，时间 O（n），空间 O（n）</li><li>DFS，迭代，时间 O（n），空间 O（n）</li></ol></li><li><p>题解：</p><ol><li><p>BFS</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasPathSum</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> sum)</span> &#123;<br>        <span class="hljs-comment">// BFS，需要多一个队列记录当前节点的路径和，时间 O（n），空间 O（n）</span><br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        Queue&lt;TreeNode&gt; queNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;TreeNode&gt;();<br>        Queue&lt;Integer&gt; queVal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Integer&gt;();<br>        queNode.offer(root);<br>        queVal.offer(root.val);<br>        <span class="hljs-keyword">while</span> (!queNode.isEmpty()) &#123;<br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> queNode.poll();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> queVal.poll();<br>            <span class="hljs-keyword">if</span> (now.left == <span class="hljs-literal">null</span> &amp;&amp; now.right == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (temp == sum) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (now.left != <span class="hljs-literal">null</span>) &#123;<br>                queNode.offer(now.left);<br>                queVal.offer(now.left.val + temp);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (now.right != <span class="hljs-literal">null</span>) &#123;<br>                queNode.offer(now.right);<br>                queVal.offer(now.right.val + temp);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>DFS</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasPathSum</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> sum)</span> &#123;<br>    <span class="hljs-comment">// DFS，迭代，时间 O（n），空间 O（n）</span><br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (root.left == <span class="hljs-literal">null</span> &amp;&amp; root.right == <span class="hljs-literal">null</span> &amp;&amp; root.val == sum) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> hasPathSum(root.left, sum - root.val) || hasPathSum(root.right, sum - root.val);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>要注意 DFS 迭代时候，不是判断节点为 null，而是判断节点是否为叶子节点（两个子节点为 null），这个路径是到叶子节点才有效</li></ol></li></ul><h2 id="7-递归7-统计路径和等于一个数的路径数量"><a href="#7-递归7-统计路径和等于一个数的路径数量" class="headerlink" title="7. 递归7 统计路径和等于一个数的路径数量"></a>7. 递归7 统计路径和等于一个数的路径数量</h2><ul><li><p>题目：路径不必 root 开头或 leaf 结尾，统计路径和为某数的路径数量（lc437）</p></li><li><p>思路：</p><ol><li>DFS，每个点当路径出发点遍历找路径，时间 O（n^2），空间 O（n）</li><li>前缀和，DFS 时候记录当前路径和，和处当前以外的路径（前缀）出现的情况（HashMap 记录），当前路径和减去 targetSum 得到的数字在 HashMap 当中找有没有，有几个，就是当前节点为结束的满足条件的路径的个数</li></ol></li><li><p>题解：</p><ol><li><p>DFS</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pathSum</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> sum)</span> &#123;<br>    <span class="hljs-comment">// DFS，每个点当路径出发点遍历找路径，时间 O（n^2），空间 O（n）</span><br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> pathSumStartWithRoot(root, sum) + pathSum(root.left, sum) + pathSum(root.right, sum);<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pathSumStartWithRoot</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> sum)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (root.val == sum) ret++;<br>    ret += pathSumStartWithRoot(root.left, sum - root.val) + pathSumStartWithRoot(root.right, sum - root.val);<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>前缀和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 前缀和，DFS 时候记录当前路径和，和处当前以外的路径（前缀）出现的情况（HashMap 记录），当前路径和减去 targetSum 得到的数字在 HashMap 当中找有没有，有几个，就是当前节点为结束的满足条件的路径的个数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pathSum</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> targetSum)</span> &#123;<br>        HashMap&lt;Long, Integer&gt; prefix = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        prefix.put(<span class="hljs-number">0L</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> dfs(root, prefix, <span class="hljs-number">0</span>, targetSum);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(TreeNode root, Map&lt;Long, Integer&gt; prefix, <span class="hljs-type">long</span> curr, <span class="hljs-type">int</span> targetSum)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        curr += root.val;<br><br>        ret = prefix.getOrDefault(curr - targetSum, <span class="hljs-number">0</span>);<br>        prefix.put(curr, prefix.getOrDefault(curr, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>        ret += dfs(root.left, prefix, curr, targetSum);<br>        ret += dfs(root.right, prefix, curr, targetSum);<br>        prefix.put(curr, prefix.getOrDefault(curr, <span class="hljs-number">0</span>) - <span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>用前缀和来做，真是漂亮</li><li>注意在递归完左右节点后，需要在map当中去掉当前节点的前缀和！！</li><li>注意一开始要 prefix.put(0L, 1); 不然满足条件的根节点出发的路径不会被记录</li></ol></li></ul><h2 id="8-递归8-子树"><a href="#8-递归8-子树" class="headerlink" title="8. 递归8 子树"></a>8. 递归8 子树</h2><ul><li><p>题目：判断另一棵树是否是一棵树的子树，子树不是部分树（lc572）</p></li><li><p>思路：</p><ol><li>递归每个节点，判断当前子树是够为子树，时间 O（mn），空间 O（m）</li><li>先序遍历序列上做串匹配，需要遍历时插入空节点，匹配时用 KMP，时间 O（m +n），空间 O（m + n）</li><li><img src="/img/algorithm/img/04.png" alt="04"><br><img src="/img/algorithm/img/05.png" alt="05"></li></ol></li><li><p>题解：</p><ol><li><p>递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSubtree</span><span class="hljs-params">(TreeNode s, TreeNode t)</span> &#123;<br>    <span class="hljs-comment">// 递归每个节点，判断当前子树是够为子树，时间 O（mn），空间 O（m）</span><br>    <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> isSubtreeWithRoot(s, t) || isSubtree(s.left, t) || isSubtree(s.right, t);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSubtreeWithRoot</span><span class="hljs-params">(TreeNode s, TreeNode t)</span> &#123;<br>    <span class="hljs-keyword">if</span> (t == <span class="hljs-literal">null</span> &amp;&amp; s == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span> (t == <span class="hljs-literal">null</span> || s == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (t.val != s.val) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> isSubtreeWithRoot(s.left, t.left) &amp;&amp; isSubtreeWithRoot(s.right, t.right);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>kmp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 先序遍历序列上做串匹配，需要遍历时插入空节点，匹配时用 KMP，时间 O（m +n），空间 O（m + n）</span><br>    List&lt;Integer&gt; sOrder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>    List&lt;Integer&gt; tOrder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>    <span class="hljs-type">int</span> maxElement, lNull, rNull;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSubtree</span><span class="hljs-params">(TreeNode s, TreeNode t)</span> &#123;<br>        maxElement = Integer.MIN_VALUE;<br>        getMaxElement(s);<br>        getMaxElement(t);<br>        lNull = maxElement + <span class="hljs-number">1</span>;<br>        rNull = maxElement + <span class="hljs-number">2</span>;<br><br>        getDfsOrder(s, sOrder);<br>        getDfsOrder(t, tOrder);<br><br>        <span class="hljs-keyword">return</span> kmp();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getMaxElement</span><span class="hljs-params">(TreeNode t)</span> &#123;<br>        <span class="hljs-keyword">if</span> (t == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        maxElement = Math.max(maxElement, t.val);<br>        getMaxElement(t.left);<br>        getMaxElement(t.right);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getDfsOrder</span><span class="hljs-params">(TreeNode t, List&lt;Integer&gt; tar)</span> &#123;<br>        <span class="hljs-keyword">if</span> (t == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        tar.add(t.val);<br>        <span class="hljs-keyword">if</span> (t.left != <span class="hljs-literal">null</span>) &#123;<br>            getDfsOrder(t.left, tar);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            tar.add(lNull);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (t.right != <span class="hljs-literal">null</span>) &#123;<br>            getDfsOrder(t.right, tar);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            tar.add(rNull);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">kmp</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sLen</span> <span class="hljs-operator">=</span> sOrder.size(), tLen = tOrder.size();<br>        <span class="hljs-type">int</span>[] fail = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[tOrder.size()];<br>        Arrays.fill(fail, -<span class="hljs-number">1</span>); <span class="hljs-comment">// 学习使用 Arrays.fill() 方法</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, j = -<span class="hljs-number">1</span>; i &lt; tLen; ++i) &#123;<br>            <span class="hljs-keyword">while</span> (j != -<span class="hljs-number">1</span> &amp;&amp; !(tOrder.get(i).equals(tOrder.get(j + <span class="hljs-number">1</span>)))) &#123;<br>                j = fail[j];<br>            &#125;<br>            <span class="hljs-keyword">if</span> (tOrder.get(i).equals(tOrder.get(j + <span class="hljs-number">1</span>))) &#123;<br>                ++j;<br>            &#125;<br>            fail[i] = j;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = -<span class="hljs-number">1</span>; i &lt; sLen; ++i) &#123;<br>            <span class="hljs-keyword">while</span> (j != -<span class="hljs-number">1</span> &amp;&amp; !(sOrder.get(i).equals(tOrder.get(j + <span class="hljs-number">1</span>)))) &#123;<br>                j = fail[j];<br>            &#125;<br>            <span class="hljs-keyword">if</span> (sOrder.get(i).equals(tOrder.get(j + <span class="hljs-number">1</span>))) &#123;<br>                ++j;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (j == tLen - <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Hash</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_N</span> <span class="hljs-operator">=</span> <span class="hljs-number">1005</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MOD</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000000007</span>;<br>    <span class="hljs-type">boolean</span>[] vis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[MAX_N];<br>    <span class="hljs-type">int</span>[] p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[MAX_N];<br>    <span class="hljs-type">int</span> tot;<br>    Map&lt;TreeNode, <span class="hljs-type">int</span>[]&gt; hS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;TreeNode, <span class="hljs-type">int</span>[]&gt;();<br>    Map&lt;TreeNode, <span class="hljs-type">int</span>[]&gt; hT = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;TreeNode, <span class="hljs-type">int</span>[]&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSubtree</span><span class="hljs-params">(TreeNode s, TreeNode t)</span> &#123;<br>        getPrime();<br>        dfs(s, hS);<br>        dfs(t, hT);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">tHash</span> <span class="hljs-operator">=</span> hT.get(t)[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;TreeNode, <span class="hljs-type">int</span>[]&gt; entry : hS.entrySet()) &#123;<br>            <span class="hljs-keyword">if</span> (entry.getValue()[<span class="hljs-number">0</span>] == tHash) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getPrime</span><span class="hljs-params">()</span> &#123;<br>        vis[<span class="hljs-number">0</span>] = vis[<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br>        tot = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt; MAX_N; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (!vis[i]) &#123;<br>                p[++tot] = i;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= tot &amp;&amp; i * p[j] &lt; MAX_N; ++j) &#123;<br>                vis[i * p[j]] = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">if</span> (i % p[j] == <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(TreeNode o, Map&lt;TreeNode, <span class="hljs-type">int</span>[]&gt; h)</span> &#123;<br>        h.put(o, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;o.val, <span class="hljs-number">1</span>&#125;);<br>        <span class="hljs-keyword">if</span> (o.left == <span class="hljs-literal">null</span> &amp;&amp; o.right == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (o.left != <span class="hljs-literal">null</span>) &#123;<br>            dfs(o.left, h);<br>            <span class="hljs-type">int</span>[] val = h.get(o);<br>            val[<span class="hljs-number">1</span>] += h.get(o.left)[<span class="hljs-number">1</span>];<br>            val[<span class="hljs-number">0</span>] = (<span class="hljs-type">int</span>) ((val[<span class="hljs-number">0</span>] + (<span class="hljs-number">31L</span> * h.get(o.left)[<span class="hljs-number">0</span>] * p[h.get(o.left)[<span class="hljs-number">1</span>]]) % MOD) % MOD);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (o.right != <span class="hljs-literal">null</span>) &#123;<br>            dfs(o.right, h);<br>            <span class="hljs-type">int</span>[] val = h.get(o);<br>            val[<span class="hljs-number">1</span>] += h.get(o.right)[<span class="hljs-number">1</span>];<br>            val[<span class="hljs-number">0</span>] = (<span class="hljs-type">int</span>) ((val[<span class="hljs-number">0</span>] + (<span class="hljs-number">179L</span> * h.get(o.right)[<span class="hljs-number">0</span>] * p[h.get(o.right)[<span class="hljs-number">1</span>]]) % MOD) % MOD);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ul><h2 id="9-递归9-树的对称"><a href="#9-递归9-树的对称" class="headerlink" title="9. 递归9 树的对称"></a>9. 递归9 树的对称</h2><ul><li><p>题目：判断一棵树是不是对称的（101）</p></li><li><p>思路：</p><ol><li>递归，不断判断左右子树是否对称，时间 O（n），空间 O（n）</li><li>迭代，BFS，用一个队列存两棵树，两树孩子节点入队的顺序相反，每次在队列取两个节点判断是否对称，时间 O（n），空间 O（n）</li></ol></li><li><p>题解：</p><ol><li><p>递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSymmetric</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> isSymmetric(root.left, root.right);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSymmetric</span><span class="hljs-params">(TreeNode t1, TreeNode t2)</span> &#123;<br>    <span class="hljs-keyword">if</span> (t1 == <span class="hljs-literal">null</span> &amp;&amp; t2 == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span> (t1 == <span class="hljs-literal">null</span> || t2 == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (t1.val != t2.val) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> isSymmetric(t1.left, t2.right) &amp;&amp; isSymmetric(t1.right, t2.left);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>迭代</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSymmetric</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">return</span> check(root, root);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">check</span><span class="hljs-params">(TreeNode u, TreeNode v)</span> &#123;<br>        Queue&lt;TreeNode&gt; q = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;TreeNode&gt;();<br>        q.offer(u);<br>        q.offer(v);<br>        <span class="hljs-keyword">while</span> (!q.isEmpty()) &#123;<br>            u = q.poll();<br>            v = q.poll();<br>            <span class="hljs-keyword">if</span> (u == <span class="hljs-literal">null</span> &amp;&amp; v == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> ((u == <span class="hljs-literal">null</span> || v == <span class="hljs-literal">null</span>) || (u.val != v.val)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br><br>            q.offer(u.left);<br>            q.offer(v.right);<br><br>            q.offer(u.right);<br>            q.offer(v.left);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>层次队列变化多端</li><li>方法需要两棵树输入，有关对称时候，可以考虑将 root 传入两次</li></ol></li></ul><h2 id="10-递归10-最小路径"><a href="#10-递归10-最小路径" class="headerlink" title="10.  递归10 最小路径"></a>10.  递归10 最小路径</h2><ul><li><p>题目：返回树根到最近叶子节点的距离+1（lc111）</p></li><li><p>思路：</p><ol><li>递归，DFS，每个非叶子节点分别计算左右子树最小深度，时间 O（n），空间 O（n）</li><li>迭代，BFS，遇到第一个叶子结点返回其深度，时间 O（n），空间 O（n）</li></ol></li><li><p>题解：</p><ol><li><p>递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minDepth</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-comment">// 递归，DFS，每个非叶子节点分别计算左右子树最小深度，时间 O（n），空间 O（n）</span><br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> minDepth(root.left);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> minDepth(root.right);<br>    <span class="hljs-keyword">if</span> (left == <span class="hljs-number">0</span> || right == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> left + right + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> Math.min(left, right) + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>迭代</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 迭代，BFS，遇到第一个叶子结点返回其深度，时间 O（n），空间 O（n）</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">QueueNode</span> &#123;<br>        TreeNode node;<br>        <span class="hljs-type">int</span> depth;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">QueueNode</span><span class="hljs-params">(TreeNode node, <span class="hljs-type">int</span> depth)</span> &#123;<br>            <span class="hljs-built_in">this</span>.node = node;<br>            <span class="hljs-built_in">this</span>.depth = depth;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minDepth</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        Queue&lt;QueueNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;QueueNode&gt;();<br>        queue.offer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueueNode</span>(root, <span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>            <span class="hljs-type">QueueNode</span> <span class="hljs-variable">nodeDepth</span> <span class="hljs-operator">=</span> queue.poll();<br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> nodeDepth.node;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">depth</span> <span class="hljs-operator">=</span> nodeDepth.depth;<br>            <span class="hljs-keyword">if</span> (node.left == <span class="hljs-literal">null</span> &amp;&amp; node.right == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> depth;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (node.left != <span class="hljs-literal">null</span>) &#123;<br>                queue.offer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueueNode</span>(node.left, depth + <span class="hljs-number">1</span>));<br>            &#125;<br>            <span class="hljs-keyword">if</span> (node.right != <span class="hljs-literal">null</span>) &#123;<br>                queue.offer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueueNode</span>(node.right, depth + <span class="hljs-number">1</span>));<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>这种找最短路径一般都是叶子节点！！！不是到 null 就停！！！</li><li>叶子节点返回 1，而不是根节点开始记为 1，写起来会简洁点</li></ol></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E6%A0%91.md">CS-Notes&#x2F;Leetcode 题解 - 树.md at master · CyC2018&#x2F;CS-Notes (github.com)</a></li><li><a href="https://leetcode.cn/problemset/all/?topicSlugs=tree&page=1&sorting=W3t9XQ==">题库 - 力扣 (LeetCode) 全球极客挚爱的技术成长平台</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>专项算法题目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>data structure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法专项精选题 - 链表（二）</title>
    <link href="/2022/06/14/%E7%AE%97%E6%B3%95/%E4%B8%93%E9%A1%B9%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/algorithm2/"/>
    <url>/2022/06/14/%E7%AE%97%E6%B3%95/%E4%B8%93%E9%A1%B9%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/algorithm2/</url>
    
    <content type="html"><![CDATA[<h1 id="链表（二）"><a href="#链表（二）" class="headerlink" title="链表（二）"></a>链表（二）</h1><h2 id="11-链表中环的入口节点"><a href="#11-链表中环的入口节点" class="headerlink" title="11. 链表中环的入口节点"></a>11. 链表中环的入口节点</h2><ul><li><p>题目：如果一个链表中包含环，如何找出环的入口节点（jz23）</p></li><li><p>思路：</p><ol><li>哈希法，用一个 HashSet 存储访问过的点，遍历到环入口节点就返回，时间 O（n），空间 O（n）</li><li>快慢指针法，fast 一次走两步，slow 一次走一步，相遇后，fast一次走一步，slow 从头一次走一步，再相遇就是入口点，时间 O（n），空间 O（1）<br><img src="/img/algorithm/img/01.png" alt="01"></li></ol></li><li><p>题解：</p><ol><li><p>哈希法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 哈希法，用一个 HashSet 存储访问过的点，遍历到环入口节点就返回，时间 O（n），空间 O（n）</span><br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">EntryNodeOfLoop</span><span class="hljs-params">(ListNode pHead)</span> &#123;<br>        HashSet&lt;ListNode&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> pHead;<br>        <span class="hljs-keyword">while</span>(temp != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">if</span>(set.contains(temp))&#123;<br>                <span class="hljs-keyword">return</span> temp;<br>            &#125;<br>            set.add(temp);<br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>快慢指针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 快慢指针法，fast 一次走两步，slow 一次走一步，相遇后，fast一次走一步，slow 从头一次走一步，再相遇就是入口点，时间 O（n），空间 O（1）</span><br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">EntryNodeOfLoop</span><span class="hljs-params">(ListNode pHead)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(pHead == <span class="hljs-literal">null</span> || pHead.next == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">fast</span> <span class="hljs-operator">=</span> pHead;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> pHead;<br>        <span class="hljs-keyword">while</span>(fast != <span class="hljs-literal">null</span> &amp;&amp; fast.next != <span class="hljs-literal">null</span>)&#123;<br>            fast = fast.next.next;<br>            slow = slow.next;<br>            <span class="hljs-keyword">if</span>(fast == slow)&#123;<br>                <span class="hljs-type">ListNode</span> <span class="hljs-variable">slow2</span> <span class="hljs-operator">=</span> pHead;<br>                <span class="hljs-keyword">while</span>(slow2 != slow)&#123;<br>                    slow2 = slow2.next;<br>                    slow = slow.next;<br>                &#125;<br>                <span class="hljs-keyword">return</span> slow2;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>链表不会做就用快慢指针，要用数学推导出长度间的关系</li><li>找重合马上想到 hash 表</li></ol></li></ul><h2 id="12-复杂链表的复制"><a href="#12-复杂链表的复制" class="headerlink" title="12. 复杂链表的复制"></a>12. 复杂链表的复制</h2><ul><li><p>题目：链表中节点增加一个指向链表中任意位置节点的指针，复制该链表（jz35）</p></li><li><p>思路：</p><ol><li>HashSet 存每个节点对应的新节点，每次赋值存对应位置的节点指针，时间 O（n），空间 O（n）</li><li>将 HashSet 插入链表，每个节点后链一个新节点，每次找节点就直接找对应节点的后一个，时间 O（n），空间 O（n）</li></ol></li><li><p>题解：</p><ol><li><p>HashSet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> RandomListNode <span class="hljs-title function_">Clone</span><span class="hljs-params">(RandomListNode head)</span> &#123;<br>        <span class="hljs-comment">// HashSet 存每个节点对应的新节点，每次赋值存对应位置的节点指针，时间 O（n），空间 O（n）</span><br>        Map&lt;RandomListNode, RandomListNode&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">RandomListNode</span> <span class="hljs-variable">dummy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomListNode</span>(-<span class="hljs-number">1</span>);<br>        <span class="hljs-type">RandomListNode</span> <span class="hljs-variable">tail</span> <span class="hljs-operator">=</span> dummy, tmp = head;<br>        <span class="hljs-keyword">while</span> (tmp != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">RandomListNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomListNode</span>(tmp.label);<br>            map.put(tmp, node);<br>            tail.next = node;<br>            tail = tail.next;<br>            tmp = tmp.next;<br>        &#125;<br>        tail = dummy.next;<br>        <span class="hljs-keyword">while</span> (head != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (head.random != <span class="hljs-literal">null</span>) tail.random = map.get(head.random);<br>            tail = tail.next;<br>            head = head.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummy.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>原地 Hash</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> RandomListNode <span class="hljs-title function_">Clone</span><span class="hljs-params">(RandomListNode head)</span> &#123;<br>        <span class="hljs-comment">// 将 HashSet 插入链表，每个节点后链一个新节点，每次找节点就直接找对应节点的后一个，时间 O（n），空间 O（n）</span><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">RandomListNode</span> <span class="hljs-variable">dummy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomListNode</span>(-<span class="hljs-number">1</span>);<br>        dummy.next = head;<br>        <span class="hljs-keyword">while</span> (head != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">RandomListNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomListNode</span>(head.label);<br>            node.next = head.next;<br>            head.next = node;<br>            head = node.next;<br>        &#125;<br>        head = dummy.next;<br>        <span class="hljs-keyword">while</span> (head != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (head.random != <span class="hljs-literal">null</span>) &#123;<br>                head.next.random = head.random.next;<br>            &#125;<br>            head = head.next.next;<br>        &#125;<br>        head = dummy.next;<br>        <span class="hljs-type">RandomListNode</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> head.next;<br>        <span class="hljs-keyword">while</span> (head != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">RandomListNode</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> head.next;<br>            <span class="hljs-keyword">if</span> (head.next != <span class="hljs-literal">null</span>) head.next = head.next.next;<br>            head = tmp;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>将 HashSet 烂熟于心，根据题目中需求快速找到需要的对应的数据结构</li><li>将 HashSet 放到链表里也太六了</li></ol></li></ul><h2 id="13-从尾到头打印链表"><a href="#13-从尾到头打印链表" class="headerlink" title="13. 从尾到头打印链表"></a>13. 从尾到头打印链表</h2><ul><li><p>题目：从尾到头打印链表</p></li><li><p>思路：</p><ol><li>顺序遍历链表，在 ArrayList 中不断 .add(0, val)</li><li>顺序遍历链表，在 Deque（LinkedList）里面不断 push（val）</li><li>递归，借助系统的“栈”帮忙打印</li></ol></li><li><p>题解：</p><ol><li><p>ArrayList</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 顺序遍历链表，在 ArrayList 中不断 .add(0, val)</span><br>    <span class="hljs-keyword">public</span> ArrayList&lt;Integer&gt; <span class="hljs-title function_">printListFromTailToHead</span><span class="hljs-params">(ListNode listNode)</span> &#123;<br>        ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> listNode;<br>        <span class="hljs-keyword">while</span>(tmp!=<span class="hljs-literal">null</span>)&#123;<br>            list.add(<span class="hljs-number">0</span>,tmp.val);<br>            tmp = tmp.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Deque</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 顺序遍历链表，在 Deque（LinkedList）里面不断 push（val）</span><br>    <span class="hljs-keyword">public</span> ArrayList&lt;Integer&gt; <span class="hljs-title function_">printListFromTailToHead</span><span class="hljs-params">(ListNode listNode)</span> &#123;<br>        ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Deque&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>();<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> listNode;<br>        <span class="hljs-keyword">while</span> (tmp != <span class="hljs-literal">null</span>) &#123;<br>            stack.push(tmp.val);<br>            tmp = tmp.next;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (!stack.isEmpty()) &#123;<br>            list.add(stack.pop());<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>    <span class="hljs-comment">// 递归，借助系统的“栈”帮忙打印</span><br>    <span class="hljs-keyword">public</span> ArrayList&lt;Integer&gt; <span class="hljs-title function_">printListFromTailToHead</span><span class="hljs-params">(ListNode listNode)</span> &#123;<br>        <span class="hljs-keyword">if</span>(listNode!=<span class="hljs-literal">null</span>)&#123;<br>            printListFromTailToHead(listNode.next);<br>            list.add(listNode.val);<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>需要使用 Stack 时候，不推荐使用 util.Stack，而是推荐使用接口 Deque 的实现类 LinkedList 或 ArrayDeque</li><li>递归的调用函数可以看成是利用系统提供的“栈”</li></ol></li></ul><h2 id="14-删除链表节点"><a href="#14-删除链表节点" class="headerlink" title="14. 删除链表节点"></a>14. 删除链表节点</h2><ul><li><p>题目：删除链表中一个节点</p></li><li><p>思路：</p><ol><li>如果函数的输入是头节点指针，需要遍历一遍，时间复杂度 O(n)</li><li>如果函数的输入是需要删除的节点指针，除非是最后一个节点，否则覆盖下一个节点，删掉下一个节点，平均时间复杂度 O(1)</li></ol></li><li><p>题解：</p><ol><li><p>遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">deleteNode</span> <span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(-<span class="hljs-number">1</span>);<br>        dummy.next = head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> dummy;<br>        <span class="hljs-keyword">while</span>(node.next!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">if</span>(node.next.val==val)&#123;<br>               node.next = node.next.next;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            node = node.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummy.next;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>遍历链表时候，为了方便循环的书写，可以增加一个 dummy &#x3D; new ListNode(-1) 在头节点之前</li><li>删除链表不需要双指针，一个 node.next &#x3D; node.next.next 即可完成删除操作</li></ol></li></ul><h2 id="15-LRU-缓存"><a href="#15-LRU-缓存" class="headerlink" title="15. LRU 缓存"></a>15. LRU 缓存</h2><ul><li><p>题目：实现一个 LRU 类，满足 最近最少使用缓存约束的数据结构（lc146）</p></li><li><p>思路：</p><ol><li>LinkedHashMap 可以实现 LRU，时间 O（1），空间 O（n）</li><li>自己写一个哈希表辅以双向链表实现，满足 LRU，时间 O（1），空间 O（n）</li></ol></li><li><p>题解：</p><ol><li><p>LinkedHashMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LRUCache</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;Integer, Integer&gt;&#123;<br>    <span class="hljs-comment">// LinkedHashMap 可以实现 LRU，时间 O（1），空间 O（n）</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> capacity;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LRUCache</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        <span class="hljs-built_in">super</span>(capacity, <span class="hljs-number">0.75F</span>, <span class="hljs-literal">true</span>);<br>        <span class="hljs-built_in">this</span>.capacity = capacity;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.getOrDefault(key, -<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(<span class="hljs-type">int</span> key, <span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-built_in">super</span>.put(key, value);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">removeEldestEntry</span><span class="hljs-params">(Map.Entry&lt;Integer, Integer&gt; eldest)</span> &#123;<br>        <span class="hljs-keyword">return</span> size() &gt; capacity; <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>哈希表 + 双向链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LRUCache</span> &#123;<br>    <span class="hljs-comment">// 自己写一个哈希表辅以双向链表实现，满足 LRU，时间 O（1），空间 O（n）</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">DLinkedNode</span> &#123;<br>        <span class="hljs-type">int</span> key;<br>        <span class="hljs-type">int</span> value;<br>        DLinkedNode prev;<br>        DLinkedNode next;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">DLinkedNode</span><span class="hljs-params">()</span> &#123;&#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">DLinkedNode</span><span class="hljs-params">(<span class="hljs-type">int</span> _key, <span class="hljs-type">int</span> _value)</span> &#123;key = _key; value = _value;&#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Map&lt;Integer, DLinkedNode&gt; cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer, DLinkedNode&gt;();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> capacity;<br>    <span class="hljs-keyword">private</span> DLinkedNode head, tail;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LRUCache</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        <span class="hljs-built_in">this</span>.size = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">this</span>.capacity = capacity;<br>        <span class="hljs-comment">// 使用伪头部和伪尾部节点</span><br>        head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DLinkedNode</span>();<br>        tail = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DLinkedNode</span>();<br>        head.next = tail;<br>        tail.prev = head;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> &#123;<br>        <span class="hljs-type">DLinkedNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> cache.get(key);<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-comment">// 如果 key 存在，先通过哈希表定位，再移到头部</span><br>        moveToHead(node);<br>        <span class="hljs-keyword">return</span> node.value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(<span class="hljs-type">int</span> key, <span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-type">DLinkedNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> cache.get(key);<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 如果 key 不存在，创建一个新的节点</span><br>            <span class="hljs-type">DLinkedNode</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DLinkedNode</span>(key, value);<br>            <span class="hljs-comment">// 添加进哈希表</span><br>            cache.put(key, newNode);<br>            <span class="hljs-comment">// 添加至双向链表的头部</span><br>            addToHead(newNode);<br>            ++size;<br>            <span class="hljs-keyword">if</span> (size &gt; capacity) &#123;<br>                <span class="hljs-comment">// 如果超出容量，删除双向链表的尾部节点</span><br>                <span class="hljs-type">DLinkedNode</span> <span class="hljs-variable">tail</span> <span class="hljs-operator">=</span> removeTail();<br>                <span class="hljs-comment">// 删除哈希表中对应的项</span><br>                cache.remove(tail.key);<br>                --size;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 如果 key 存在，先通过哈希表定位，再修改 value，并移到头部</span><br>            node.value = value;<br>            moveToHead(node);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addToHead</span><span class="hljs-params">(DLinkedNode node)</span> &#123;<br>        node.prev = head;<br>        node.next = head.next;<br>        head.next.prev = node;<br>        head.next = node;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeNode</span><span class="hljs-params">(DLinkedNode node)</span> &#123;<br>        node.prev.next = node.next;<br>        node.next.prev = node.prev;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">moveToHead</span><span class="hljs-params">(DLinkedNode node)</span> &#123;<br>        removeNode(node);<br>        addToHead(node);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> DLinkedNode <span class="hljs-title function_">removeTail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">DLinkedNode</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> tail.prev;<br>        removeNode(res);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>LinkedHashMap(int initialCapacity, float loadFactor, boolean accessOrder) 中 accessOrder &#x3D; true 时候，列表维护访问顺序（LRU）</li><li>LinkedHashMap 中 protected boolean removeEldestEntry(Map.Entry&lt;Integer, Integer&gt; eldest) 会在 addEntry 当中判断一下是否删除，默认是返回 true，可以重写这个函数使得缓存有最大值</li><li>在双向链表的实现中，使用一个伪头部（dummy head）和伪尾部（dummy tail）标记界限，这样在添加节点和删除节点的时候就不需要检查相邻的节点是否存在。</li></ol></li></ul><h2 id="16-重排链表"><a href="#16-重排链表" class="headerlink" title="16.  重排链表"></a>16.  重排链表</h2><ul><li><p>题目：链表后半段逆序后，和前半段交叉排列（lc143）</p></li><li><p>思路：</p><ol><li>线性表存储链表，用下标访问重排，时间 O（n），空间 O（n）</li><li>快慢指针找到中点，反转后半链表，链表合并，时间 O（n），空间 O（1）</li></ol></li><li><p>题解：</p><ol><li><p>线性表存储</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reorderList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-comment">// 线性表存储链表，用下标访问重排，时间 O（n），空间 O（n）</span><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        List&lt;ListNode&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ListNode&gt;();<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span> (node != <span class="hljs-literal">null</span>) &#123;<br>            list.add(node);<br>            node = node.next;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = list.size() - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>            list.get(i).next = list.get(j);<br>            i++;<br>            <span class="hljs-keyword">if</span> (i == j) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            list.get(j).next = list.get(i);<br>            j--;<br>        &#125;<br>        list.get(i).next = <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>快慢指针找中点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 快慢指针找到中点，反转后半链表，链表合并，时间 O（n），空间 O（1）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reorderList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> middleNode(head);<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">l1</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">l2</span> <span class="hljs-operator">=</span> mid.next;<br>        mid.next = <span class="hljs-literal">null</span>;<br>        l2 = reverseList(l2);<br>        mergeList(l1, l2);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">middleNode</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">fast</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span> (fast.next != <span class="hljs-literal">null</span> &amp;&amp; fast.next.next != <span class="hljs-literal">null</span>) &#123;<br>            slow = slow.next;<br>            fast = fast.next.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> slow;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span> (curr != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">nextTemp</span> <span class="hljs-operator">=</span> curr.next;<br>            curr.next = prev;<br>            prev = curr;<br>            curr = nextTemp;<br>        &#125;<br>        <span class="hljs-keyword">return</span> prev;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mergeList</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> &#123;<br>        ListNode l1_tmp;<br>        ListNode l2_tmp;<br>        <span class="hljs-keyword">while</span> (l1 != <span class="hljs-literal">null</span> &amp;&amp; l2 != <span class="hljs-literal">null</span>) &#123;<br>            l1_tmp = l1.next;<br>            l2_tmp = l2.next;<br><br>            l1.next = l2;<br>            l1 = l1_tmp;<br><br>            l2.next = l1;<br>            l2 = l2_tmp;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>注意反转链表时候，指向新表头的变量一开始要置为 null，不然新链表尾部会出现环</li></ol></li></ul><h2 id="17-合并-k-个升序链表"><a href="#17-合并-k-个升序链表" class="headerlink" title="17. 合并 k 个升序链表"></a>17. 合并 k 个升序链表</h2><ul><li><p>题目：合并 k 个升序链表成为一个升序链表（lc23）</p></li><li><p>思路：</p><ol><li>分治合并，先两两合并，再重复两两合并，时间 O（kn * logk），空间 O（logk）</li><li>优先队列，败者树，同时合并 k 个队列，时间O（kn * logk），空间 O（k）</li></ol></li><li><p>题解：</p><ol><li><p>分治合并</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 分治合并，先两两合并，再重复两两合并，时间 O（kn * logk），空间 O（logk）</span><br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">mergeKLists</span><span class="hljs-params">(ListNode[] lists)</span> &#123;<br>        <span class="hljs-keyword">return</span> merge(lists, <span class="hljs-number">0</span>, lists.length - <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">merge</span><span class="hljs-params">(ListNode[] lists, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> &#123;<br>        <span class="hljs-keyword">if</span> (l == r) &#123;<br>            <span class="hljs-keyword">return</span> lists[l];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (l &gt; r) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> mergeTwoLists(merge(lists, l, mid), merge(lists, mid + <span class="hljs-number">1</span>, r));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">mergeTwoLists</span><span class="hljs-params">(ListNode a, ListNode b)</span> &#123;<br>        <span class="hljs-keyword">if</span> (a == <span class="hljs-literal">null</span> || b == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> a != <span class="hljs-literal">null</span> ? a : b;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">tail</span> <span class="hljs-operator">=</span> head, aPtr = a, bPtr = b;<br>        <span class="hljs-keyword">while</span> (aPtr != <span class="hljs-literal">null</span> &amp;&amp; bPtr != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (aPtr.val &lt; bPtr.val) &#123;<br>                tail.next = aPtr;<br>                aPtr = aPtr.next;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                tail.next = bPtr;<br>                bPtr = bPtr.next;<br>            &#125;<br>            tail = tail.next;<br>        &#125;<br>        tail.next = (aPtr != <span class="hljs-literal">null</span> ? aPtr : bPtr);<br>        <span class="hljs-keyword">return</span> head.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>优先队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 优先队列，败者树，同时合并 k 个队列，时间O（kn * logk），空间 O（k）</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Status</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Status&gt; &#123;<br>        <span class="hljs-type">int</span> val;<br>        ListNode ptr;<br><br>        Status(<span class="hljs-type">int</span> val, ListNode ptr) &#123;<br>            <span class="hljs-built_in">this</span>.val = val;<br>            <span class="hljs-built_in">this</span>.ptr = ptr;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Status status2)</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.val - status2.val;<br>        &#125;<br>    &#125;<br><br>    PriorityQueue&lt;Status&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;Status&gt;();<br><br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">mergeKLists</span><span class="hljs-params">(ListNode[] lists)</span> &#123;<br>        <span class="hljs-keyword">for</span> (ListNode node: lists) &#123;<br>            <span class="hljs-keyword">if</span> (node != <span class="hljs-literal">null</span>) &#123;<br>                queue.offer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Status</span>(node.val, node));<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">tail</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>            <span class="hljs-type">Status</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> queue.poll();<br>            tail.next = f.ptr;<br>            tail = tail.next;<br>            <span class="hljs-keyword">if</span> (f.ptr.next != <span class="hljs-literal">null</span>) &#123;<br>                queue.offer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Status</span>(f.ptr.next.val, f.ptr.next));<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> head.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>return mergeTwoLists(merge(lists, l, mid), merge(lists, mid + 1, r)); 这里比较难理解，但是很巧妙</li><li>用优先级队列放自定义的 Status 数据需要将 States implement Comparable<Status> 重写 compareTo(Status status2)</li><li>Status 设计很巧妙，不仅存 val ，还要存 next，这样就可以知道拿出去的节点属于哪个链表</li></ol></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E9%93%BE%E8%A1%A8.md">CS-Notes&#x2F;Leetcode 题解 - 链表.md at master · CyC2018&#x2F;CS-Notes (github.com)</a></li><li><a href="https://leetcode.cn/problemset/all/?page=1&sorting=W3t9XQ==&topicSlugs=linked-list">题库 - 力扣 (LeetCode) 全球极客挚爱的技术成长平台</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>专项算法题目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>data structure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法专项精选题 - 链表（一）</title>
    <link href="/2022/06/13/%E7%AE%97%E6%B3%95/%E4%B8%93%E9%A1%B9%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/algorithm1/"/>
    <url>/2022/06/13/%E7%AE%97%E6%B3%95/%E4%B8%93%E9%A1%B9%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/algorithm1/</url>
    
    <content type="html"><![CDATA[<h1 id="链表（一）"><a href="#链表（一）" class="headerlink" title="链表（一）"></a>链表（一）</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul><li><p>链表是空节点，或者有一个值和一个指向下一个链表的指针，因此很多链表问题可以用递归来处理</p></li><li><p>链表是一种动态数据结构，创建链表时候无需知道链表的长度</p></li><li><p>插入一个节点时候只需要为新的节点分配内存，然后调整指针的指向确保新节点被链接到链表当中</p></li><li><p>链表中查询节点需要 O(n) 时间复杂度</p></li><li><p>除了指向下一个，还指向前一个节点的链表为双向链表</p></li><li><p>面试遇到链表算法题目，更改输入的链表之前要问一下面试官是否可以</p></li><li><p>链表数据结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Definition for singly-linked list.</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    ListNode next;<br>    ListNode(<span class="hljs-type">int</span> x) &#123;<br>        val = x;<br>        next = <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="1-找出两个链表的交点"><a href="#1-找出两个链表的交点" class="headerlink" title="1. 找出两个链表的交点"></a>1. 找出两个链表的交点</h2><ul><li><p>题目：两个链表在某个节点处相交，找到第一个公共节点（lc160）</p></li><li><p>思路：</p><ol><li>分别遍历两链表长度，得到长度差 gap，长链表先出发 gap 个节点，然后同时遍历比较节点，时间复杂度 O(m+n)</li><li>用一个 HashSet 存放第一个链表所有节点，遍历第二个链表，遇到 HashSet 中存放的就 return，空间复杂度 O(m)</li><li>双指针同时遍历两链表，A 链表遍历结束接 B 链表，B 链表遍历结束接 A 链表，遇到相同节点就 return，或者同时遍历到 null 就return null</li></ol></li><li><p>题解：</p><ol><li><p>事先遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 分别遍历两链表长度，得到长度差 gap，长链表先出发 gap 个节点，然后同时遍历比较节点，时间复杂度 O(m+n)</span><br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">getIntersectionNode</span><span class="hljs-params">(ListNode headA, ListNode headB)</span> &#123; <br>        <span class="hljs-type">int</span> <span class="hljs-variable">aLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, bLen = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> headA;<br>        <span class="hljs-keyword">while</span>(tmp != <span class="hljs-literal">null</span>) &#123;<br>            aLen++;<br>            tmp = tmp.next;<br>        &#125;<br>        tmp = headB;<br>        <span class="hljs-keyword">while</span>(tmp != <span class="hljs-literal">null</span>) &#123;<br>            bLen++;<br>            tmp = tmp.next;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">gap</span> <span class="hljs-operator">=</span> aLen - bLen;<br>        <span class="hljs-keyword">if</span> (gap &lt; <span class="hljs-number">0</span>) &#123;<br>            tmp = headA;<br>            headA = headB;<br>            headB = tmp;<br>            gap = -gap;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">aCurr</span> <span class="hljs-operator">=</span> headA;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">bCurr</span> <span class="hljs-operator">=</span> headB;<br>        <span class="hljs-keyword">while</span> (gap != <span class="hljs-number">0</span>) &#123;<br>            aCurr = aCurr.next;<br>            gap--;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (aCurr != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (aCurr == bCurr) &#123;<br>                <span class="hljs-keyword">return</span> aCurr;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                aCurr = aCurr.next;<br>                bCurr = bCurr.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>HashSet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 用一个 HashSet 存放第一个链表所有节点，遍历第二个链表，遇到 HashSet 中存放的就 return，空间复杂度 O(m)</span><br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">getIntersectionNode</span><span class="hljs-params">(ListNode headA, ListNode headB)</span> &#123;<br>        Set&lt;ListNode&gt; visited = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;ListNode&gt;();<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> headA;<br>        <span class="hljs-keyword">while</span> (temp != <span class="hljs-literal">null</span>) &#123;<br>            visited.add(temp);<br>            temp = temp.next;<br>        &#125;<br>        temp = headB;<br>        <span class="hljs-keyword">while</span> (temp != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (visited.contains(temp)) &#123;<br>                <span class="hljs-keyword">return</span> temp;<br>            &#125;<br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>双指针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 双指针同时遍历两链表，A 链表遍历结束接 B 链表，B 链表遍历结束接 A 链表，遇到相同节点就 return，或者同时遍历到 null 就return null</span><br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">getIntersectionNode</span><span class="hljs-params">(ListNode headA, ListNode headB)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pA</span> <span class="hljs-operator">=</span> headA, pB = headB;<br>        <span class="hljs-comment">// 两节点相同或两节点都是 null，可以简化成 pA == pB</span><br>        <span class="hljs-comment">// 因为当两者有一个 null 时候，这个循环也会在 null == null 结束，所以不用实现判断两链表是否为 null</span><br>        <span class="hljs-keyword">while</span> (pA != pB) &#123;<br>            pA = pA == <span class="hljs-literal">null</span> ? headB : pA.next;<br>            pB = pB == <span class="hljs-literal">null</span> ? headA : pB.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> pA;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>对齐的思想，先找到两者差 gap，然后长的先出发 gap</li><li>hash 表的思想，找相同的对象，可以先存一个表然后再比对</li><li>加法交换律，利用 a + b &#x3D; b + a 对齐双指针</li></ol></li></ul><h2 id="2-链表反转"><a href="#2-链表反转" class="headerlink" title="2. 链表反转"></a>2. 链表反转</h2><ul><li><p>题目：反转链表（lc206）</p></li><li><p>思路：</p><ol><li>头插法，链表头不断拿点，不断在新链表头插入</li><li>next 向指，从头开始将 next 指向反转，每次需要记录下一个节点后，再将下一个节点指向当前节点</li><li>递归，当前节点后的链表递归反转，然后将当前节点连接到新的反转链表的末尾，注意递归函数返回的是反转后的链表头节点</li></ol></li><li><p>题解：</p><ol><li><p>头插法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">ReverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-comment">//头插法，链表头不断拿点，不断在新链表头插入</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">newHead</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">while</span> (head != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head.next;<br>        head.next = newHead;<br>        newHead = head;<br>        head = temp;<br>    &#125;<br>    <span class="hljs-keyword">return</span> newHead;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>反转 next</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-comment">// next 向指，从头开始将 next 指向反转，每次需要记录下一个节点后，再将下一个节点指向当前节点</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span> (curr != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> curr.next;<br>            curr.next = prev;<br>            prev = curr;<br>            curr = next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> prev;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-comment">// 递归，当前节点后的链表递归反转，然后将当前节点连接到新的反转链表的末尾，注意递归函数返回的是反转后的链表头节点</span><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">newHead</span> <span class="hljs-operator">=</span> reverseList(head.next);<br>        head.next.next = head;<br>        head.next = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">return</span> newHead;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>链表的题目需要注意，改变 next 之前要存储可能找不到的节点</li><li>一般可以循环的代码，都可以用递归实现</li><li>指向上一个节点的引用变量命名为 prev（previous），指向当前节点的引用变量命名为 curr（current）</li></ol></li></ul><h2 id="3-归并两个有序的链表"><a href="#3-归并两个有序的链表" class="headerlink" title="3. 归并两个有序的链表"></a>3. 归并两个有序的链表</h2><ul><li><p>题目：两个有序链表合成一个有序链表（lc21）</p></li><li><p>思路：</p><ol><li>迭代，两个链表头结点比较放入新链表，时间 O(m + n)，空间 O(1)</li><li>递归，确定当前节点，剩余两链表递归归并，当前节点连接归并后链表，返回当前节点，时间 O(m +n)，空间 O(m + n)</li></ol></li><li><p>题解：</p><ol><li><p>迭代</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">mergeTwoLists</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> &#123;<br>        <span class="hljs-comment">// 迭代，两个链表头结点比较放入新链表，时间 O(m + n)，空间 O(1)</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">prehead</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(-<span class="hljs-number">1</span>);<br><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> prehead;<br>        <span class="hljs-keyword">while</span> (l1 != <span class="hljs-literal">null</span> &amp;&amp; l2 != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (l1.val &lt;= l2.val) &#123;<br>                prev.next = l1;<br>                l1 = l1.next;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                prev.next = l2;<br>                l2 = l2.next;<br>            &#125;<br>            prev = prev.next;<br>        &#125;<br><br>        <span class="hljs-comment">// 合并后 l1 和 l2 最多只有一个还未被合并完，我们直接将链表末尾指向未合并完的链表即可</span><br>        prev.next = l1 == <span class="hljs-literal">null</span> ? l2 : l1;<br><br>        <span class="hljs-keyword">return</span> prehead.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">mergeTwoLists</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> &#123;<br>        <span class="hljs-comment">// 递归，确定当前节点，剩余两链表递归归并，当前节点连接归并后链表，返回当前节点，时间 O(m +n)，空间 O(m + n)</span><br>        <span class="hljs-keyword">if</span> (l1 == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> l2;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (l2 == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> l1;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (l1.val &lt; l2.val) &#123;<br>            l1.next = mergeTwoLists(l1.next, l2);<br>            <span class="hljs-keyword">return</span> l1;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            l2.next = mergeTwoLists(l1, l2.next);<br>            <span class="hljs-keyword">return</span> l2;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>递归解法写法简洁，但是可能空间效率上没有迭代解法优异</li><li>剩余表连接的简洁写法：prev.next &#x3D; l1 &#x3D;&#x3D; null ? l2 : l1;</li></ol></li></ul><h2 id="4-从有序链表中删除重复节点"><a href="#4-从有序链表中删除重复节点" class="headerlink" title="4. 从有序链表中删除重复节点"></a>4. 从有序链表中删除重复节点</h2><ul><li><p>题目：有序链表里删除重复的多余节点（lc83）有序链表里删除重复的所有节点（jz76）</p></li><li><p>思路：</p><ol><li>遍历</li><li>递归</li></ol></li><li><p>题解：</p><ol><li><p>遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">deleteDuplicates</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-comment">// 遍历</span><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span> (cur.next != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (cur.val == cur.next.val) &#123;<br>                cur.next = cur.next.next;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                cur = cur.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">deleteDuplicates</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-comment">// 递归</span><br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> head;<br>    head.next = deleteDuplicates(head.next);<br>    <span class="hljs-keyword">return</span> head.val == head.next.val ? head.next : head;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>递归里简洁的返回，判断并删除当前点用 head.val &#x3D;&#x3D; head.next.val ? head.next : head;</li></ol></li></ul><h2 id="5-删除链表的倒数第-n-个节点"><a href="#5-删除链表的倒数第-n-个节点" class="headerlink" title="5. 删除链表的倒数第  n 个节点"></a>5. 删除链表的倒数第  n 个节点</h2><ul><li><p>题目：删除链表的倒数第  n 个节点（lc19）</p></li><li><p>思路：</p><ol><li>先遍历链表长度再计算需要删除的位置，遍历到删除，时间 O(L)，空间 O(1)</li><li>入栈，弹出倒数第 n 个，时间 O(L)，空间 O(L)</li><li>双指针，first 先遍历 n 个，然后一起遍历直到 first 到结尾，时间 O(L)，空间 O(1)</li></ol></li><li><p>题解：</p><ol><li><p>事先遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">removeNthFromEnd</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-comment">// 先遍历链表长度再计算需要删除的位置，遍历到删除，时间 O(L)，空间 O(1)</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>, head);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> getLength(head);<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> dummy;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; length - n + <span class="hljs-number">1</span>; ++i) &#123;<br>            cur = cur.next;<br>        &#125;<br>        cur.next = cur.next.next;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> dummy.next;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getLength</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (head != <span class="hljs-literal">null</span>) &#123;<br>            ++length;<br>            head = head.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> length;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">removeNthFromEnd</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-comment">// 入栈，弹出倒数第 n 个，时间 O(L)，空间 O(L)</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>, head);<br>        Deque&lt;ListNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;ListNode&gt;();<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> dummy;<br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>) &#123;<br>            stack.push(cur);<br>            cur = cur.next;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            stack.pop();<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> stack.peek();<br>        prev.next = prev.next.next;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> dummy.next;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>双指针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">removeNthFromEnd</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-comment">// 双指针，first 先遍历 n 个，然后一起遍历直到 first 到结尾，时间 O(L)，空间 O(1)</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">fast</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">while</span> (n-- &gt; <span class="hljs-number">0</span>) &#123;<br>        fast = fast.next;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (fast == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> head.next;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">while</span> (fast.next != <span class="hljs-literal">null</span>) &#123;<br>        fast = fast.next;<br>        slow = slow.next;<br>    &#125;<br>    slow.next = slow.next.next;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>要养成对链表 ListNode dummy &#x3D; new ListNode(0, head); 的习惯</li></ol></li></ul><h2 id="6-交换链表中的相邻节点"><a href="#6-交换链表中的相邻节点" class="headerlink" title="6. 交换链表中的相邻节点"></a>6. 交换链表中的相邻节点</h2><ul><li><p>题目：不修改值情况下，从头开始交换相邻两个节点（lc24）</p></li><li><p>思路：</p><ol><li>递归，时间 O（n），空间 O（n）</li><li>迭代，时间 O（n），空间 O（1）</li></ol></li><li><p>题解：</p><ol><li><p>递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">swapPairs</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-comment">// 递归，时间 O（n），空间 O（n）</span><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">newHead</span> <span class="hljs-operator">=</span> head.next;<br>        head.next = swapPairs(newHead.next);<br>        newHead.next = head;<br>        <span class="hljs-keyword">return</span> newHead;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>迭代</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">swapPairs</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-comment">// 迭代，时间 O（n），空间 O（1）</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(-<span class="hljs-number">1</span>, head);<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> dummy;<br>        <span class="hljs-keyword">while</span> (curr.next != <span class="hljs-literal">null</span> &amp;&amp; curr.next.next != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> curr.next.next.next;<br>            curr.next.next.next = curr.next;<br>            curr.next = curr.next.next;<br>            curr.next.next.next = tmp;<br>            curr = curr.next.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummy.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>注意不要在 next 赋值过程中丢失对节点的引用</li></ol></li></ul><h2 id="7-链表求和"><a href="#7-链表求和" class="headerlink" title="7. 链表求和"></a>7. 链表求和</h2><ul><li><p>题目：两个链表，分别表示一个数字，每一位数字是一个节点，求和的链表（lc445）</p></li><li><p>思路：</p><ol><li>先分别将两个链表反转，然后从最低位开始求和，用一个 carry 存储进位的数字，时间 O（m + n），空间 O（1）</li><li>两个链表都压栈然后计算，时间 O（m + n），空间 O（m + n）</li></ol></li><li><p>题解：</p><ol><li><p>反转后求和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">addTwoNumbers</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> &#123;<br>        <span class="hljs-comment">// 先分别将两个链表反转，然后从最低位开始求和，用一个 carry 存储进位的数字，时间 O（m + n），空间 O（1）</span><br>        l1 = reverseList(l1);<br>        l2 = reverseList(l2);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">carry</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">newHead</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span> (l1 != <span class="hljs-literal">null</span> || l2 != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> l1 == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : l1.val;<br>            sum += l2 == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : l2.val;<br>            sum += carry;<br>            carry = sum / <span class="hljs-number">10</span>;<br>            newHead = newHead == <span class="hljs-literal">null</span> ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(sum % <span class="hljs-number">10</span>) : <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(sum % <span class="hljs-number">10</span>, newHead);<br>            l1 = l1 == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : l1.next;<br>            l2 = l2 == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : l2.next;<br>        &#125;<br>        newHead = carry == <span class="hljs-number">0</span> ? newHead : <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(carry,newHead);<br>        <span class="hljs-keyword">return</span> newHead;<br>    &#125;<br>    <span class="hljs-keyword">private</span> ListNode <span class="hljs-title function_">reverseList</span> <span class="hljs-params">(ListNode l)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">newHead</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span> (l != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> l.next;<br>            l.next = newHead;<br>            newHead = l;<br>            l = tmp;<br>        &#125;<br>        <span class="hljs-keyword">return</span> newHead;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">addTwoNumbers</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> &#123;<br>        <span class="hljs-comment">// 两个链表都压栈然后计算，时间 O（m + n），空间 O（m + n）</span><br>        Deque&lt;Integer&gt; stack1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Integer&gt;();<br>        Deque&lt;Integer&gt; stack2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Integer&gt;();<br>        <span class="hljs-keyword">while</span> (l1 != <span class="hljs-literal">null</span>) &#123;<br>            stack1.push(l1.val);<br>            l1 = l1.next;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (l2 != <span class="hljs-literal">null</span>) &#123;<br>            stack2.push(l2.val);<br>            l2 = l2.next;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">carry</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span> (!stack1.isEmpty() || !stack2.isEmpty() || carry != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> stack1.isEmpty() ? <span class="hljs-number">0</span> : stack1.pop();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> stack2.isEmpty() ? <span class="hljs-number">0</span> : stack2.pop();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> a + b + carry;<br>            carry = cur / <span class="hljs-number">10</span>;<br>            cur %= <span class="hljs-number">10</span>;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">curnode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(cur);<br>            curnode.next = ans;<br>            ans = curnode;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>反转链表不用 dummy，代码要熟练</li><li>注意 || 和 &amp;&amp; 别用错</li></ol></li></ul><h2 id="8-回文链表"><a href="#8-回文链表" class="headerlink" title="8. 回文链表"></a>8. 回文链表</h2><ul><li><p>题目：判断链表里元素是不是对称（lc234）</p></li><li><p>思路：</p><ol><li>栈，遍历链表存栈后比对，时间 O（n），空间 O（n）</li><li>切成两半，把后半段反转，然后比较两半是否相等，时间 O（n），空间 O（1）（需要改变链表）</li></ol></li><li><p>题解：</p><ol><li><p>栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPalindrome</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-comment">// 栈，遍历链表存栈后比对，时间 O（n），空间 O（n）</span><br>        Deque&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>();<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span> (tmp != <span class="hljs-literal">null</span>) &#123;<br>            stack.push(tmp.val);<br>            tmp = tmp.next;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> stack.size() / <span class="hljs-number">2</span>;<br>        tmp = head;<br>        <span class="hljs-keyword">while</span> (len-- &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (stack.pop() != tmp.val) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            tmp = tmp.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>切两半</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPalindrome</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-comment">// 切成两半，把后半段反转，然后比较两半是否相等，时间 O（n），空间 O（1）（需要改变链表）</span><br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> head, fast = head.next;<br>    <span class="hljs-keyword">while</span> (fast != <span class="hljs-literal">null</span> &amp;&amp; fast.next != <span class="hljs-literal">null</span>) &#123;<br>        slow = slow.next;<br>        fast = fast.next.next;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (fast != <span class="hljs-literal">null</span>) slow = slow.next;  <span class="hljs-comment">// 偶数节点，让 slow 指向下一个节点</span><br>    cut(head, slow);                     <span class="hljs-comment">// 切成两个链表</span><br>    <span class="hljs-keyword">return</span> isEqual(head, reverse(slow));<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cut</span><span class="hljs-params">(ListNode head, ListNode cutNode)</span> &#123;<br>    <span class="hljs-keyword">while</span> (head.next != cutNode) &#123;<br>        head = head.next;<br>    &#125;<br>    head.next = <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-keyword">private</span> ListNode <span class="hljs-title function_">reverse</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">newHead</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">while</span> (head != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">nextNode</span> <span class="hljs-operator">=</span> head.next;<br>        head.next = newHead;<br>        newHead = head;<br>        head = nextNode;<br>    &#125;<br>    <span class="hljs-keyword">return</span> newHead;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEqual</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> &#123;<br>    <span class="hljs-keyword">while</span> (l1 != <span class="hljs-literal">null</span> &amp;&amp; l2 != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (l1.val != l2.val) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        l1 = l1.next;<br>        l2 = l2.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>不要有思维定式，链表是可以截断的</li><li>改变输入最好事先和面试官确认</li></ol></li></ul><h2 id="9-分隔链表"><a href="#9-分隔链表" class="headerlink" title="9. 分隔链表"></a>9. 分隔链表</h2><ul><li><p>题目：链表被分割成 k 个链表，子链表长度差为 1，长的在前</p></li><li><p>思路：</p><ol><li>拆分链表，用 % 和 &#x2F; 计算子链表长度，时间 O(n)， 空间 O(1)</li></ol></li><li><p>题解：</p><ol><li><p>拆分链表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode[] splitListToParts(ListNode root, <span class="hljs-type">int</span> k) &#123;<br>    <span class="hljs-comment">// 拆分链表，用 % 和 / 计算子链表长度，时间 O(n)， 空间 O(1)</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> root;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>) &#123;<br>        N++;<br>        cur = cur.next;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">mod</span> <span class="hljs-operator">=</span> N % k;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> N / k;<br>    ListNode[] ret = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>[k];<br>    cur = root;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; cur != <span class="hljs-literal">null</span> &amp;&amp; i &lt; k; i++) &#123;<br>        ret[i] = cur;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">curSize</span> <span class="hljs-operator">=</span> size + (mod-- &gt; <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; curSize - <span class="hljs-number">1</span>; j++) &#123;<br>            cur = cur.next;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> cur.next;<br>        cur.next = <span class="hljs-literal">null</span>;<br>        cur = next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>学习代码 curSize &#x3D; size + (mod– &gt; 0 ? 1 : 0);</li></ol></li></ul><h2 id="10-链表元素按奇偶聚集"><a href="#10-链表元素按奇偶聚集" class="headerlink" title="10. 链表元素按奇偶聚集"></a>10. 链表元素按奇偶聚集</h2><ul><li><p>题目：第奇数个放前，偶数个放后（lc328）</p></li><li><p>思路：</p><ol><li>遍历同时链出两个链表最后再合并，时间 O（n），空间 O（1）</li></ol></li><li><p>题解：</p><ol><li><p>遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">oddEvenList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">evenHead</span> <span class="hljs-operator">=</span> head.next;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">odd</span> <span class="hljs-operator">=</span> head, even = evenHead;<br>        <span class="hljs-keyword">while</span> (even != <span class="hljs-literal">null</span> &amp;&amp; even.next != <span class="hljs-literal">null</span>) &#123;<br>            odd.next = even.next;<br>            odd = odd.next;<br>            even.next = odd.next;<br>            even = even.next;<br>        &#125;<br>        odd.next = evenHead;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>小结：</p><ol><li>注意动态链接时候存储可能找不到的节点</li></ol></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E9%93%BE%E8%A1%A8.md">CS-Notes&#x2F;Leetcode 题解 - 链表.md at master · CyC2018&#x2F;CS-Notes (github.com)</a></li><li><a href="https://leetcode.cn/problemset/all/?page=1&sorting=W3t9XQ==&topicSlugs=linked-list">题库 - 力扣 (LeetCode) 全球极客挚爱的技术成长平台</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>专项算法题目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>data structure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Chapter1 Java基础</title>
    <link href="/2022/06/11/Java%20%E7%AC%94%E8%AE%B0/JavaSE/Chapter1-Java%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/06/11/Java%20%E7%AC%94%E8%AE%B0/JavaSE/Chapter1-Java%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="1-常用DOS命令"><a href="#1-常用DOS命令" class="headerlink" title="1. 常用DOS命令"></a>1. 常用DOS命令</h2>]]></content>
    
    
    <categories>
      
      <category>Java 笔记</category>
      
      <category>java 基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>张笑天的第一篇博客</title>
    <link href="/2022/06/10/Others/first-blog/"/>
    <url>/2022/06/10/Others/first-blog/</url>
    
    <content type="html"><![CDATA[<h1 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h1><ul><li>该网站会更新 <code>Java 后端开发</code> 相关的技术博客</li><li>包括但不限于：<ol><li>算法题目整理</li><li>Java 基础与细节</li><li>MySQL 基础与细节</li><li>Redis 基础与细节</li><li>计算机网络相关知识</li><li>操作系统相关知识</li><li>JVM 原理</li><li>Java 并发原理</li><li>Linux 常用命令及原理</li><li>设计模式</li><li>SSM 框架使用细节与原理</li><li>Java 项目开发文档</li></ol></li><li>千里之行始于足下，共勉</li></ul>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
